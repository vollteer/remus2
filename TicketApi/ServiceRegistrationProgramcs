// Program.cs - Service Registration für dein .NET 8 Projekt

using Microsoft.EntityFrameworkCore;
using YourProject.Data;
using YourProject.Services;
using YourProject.Services.Implementation;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;
using Serilog;

var builder = WebApplication.CreateBuilder(args);

// ====================================
// LOGGING CONFIGURATION
// ====================================

// Configure Serilog
Log.Logger = new LoggerConfiguration()
    .WriteTo.Console()
    .WriteTo.File("logs/application.log", rollingInterval: RollingInterval.Day)
    .CreateLogger();

builder.Host.UseSerilog();

// ====================================
// DATABASE CONFIGURATION
// ====================================

// Configure Entity Framework
builder.Services.AddDbContext<ApplicationDbContext>(options =>
{
    var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
    options.UseSqlServer(connectionString, sqlOptions =>
    {
        sqlOptions.EnableRetryOnFailure(
            maxRetryCount: 3,
            maxRetryDelay: TimeSpan.FromSeconds(30),
            errorNumbersToAdd: null);
        
        sqlOptions.CommandTimeout(60); // 60 seconds timeout
    });
    
    // Enable sensitive data logging in development
    if (builder.Environment.IsDevelopment())
    {
        options.EnableSensitiveDataLogging();
        options.EnableDetailedErrors();
    }
});

// ====================================
// AUTHENTICATION & AUTHORIZATION
// ====================================

// Configure JWT Authentication
builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = builder.Configuration["Jwt:Issuer"],
            ValidAudience = builder.Configuration["Jwt:Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(
                Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]!))
        };
        
        // Enable detailed error messages in development
        if (builder.Environment.IsDevelopment())
        {
            options.Events = new JwtBearerEvents
            {
                OnAuthenticationFailed = context =>
                {
                    Log.Warning("JWT Authentication failed: {Error}", context.Exception.Message);
                    return Task.CompletedTask;
                },
                OnTokenValidated = context =>
                {
                    Log.Information("JWT Token validated for user: {User}", 
                        context.Principal?.Identity?.Name ?? "Unknown");
                    return Task.CompletedTask;
                }
            };
        }
    });

// Configure Authorization Policies
builder.Services.AddAuthorization(options =>
{
    options.AddPolicy("RequireAdministratorRole", policy =>
        policy.RequireRole("Administrator"));
    
    options.AddPolicy("RequireManagerRole", policy =>
        policy.RequireRole("Administrator", "Manager"));
    
    options.AddPolicy("RequireApproverRole", policy =>
        policy.RequireRole("Administrator", "Manager", "Approver"));
    
    options.AddPolicy("CanManageForms", policy =>
        policy.RequireRole("Administrator", "Manager", "TechnicalLead"));
    
    options.AddPolicy("CanDeployForms", policy =>
        policy.RequireRole("Administrator", "Approver"));
});

// ====================================
// CORE SERVICES REGISTRATION
// ====================================

// Register Controllers
builder.Services.AddControllers(options =>
{
    // Add global filters
    options.Filters.Add<GlobalExceptionFilter>(); // Custom exception filter
    options.Filters.Add<RequestLoggingFilter>(); // Custom request logging
})
.AddNewtonsoftJson(options =>
{
    // Configure JSON serialization
    options.SerializerSettings.DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat;
    options.SerializerSettings.DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc;
    options.SerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore;
    options.SerializerSettings.ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Ignore;
});

// API Documentation
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new() { Title = "Form Builder API", Version = "v1" });
    
    // Add JWT Authentication to Swagger
    c.AddSecurityDefinition("Bearer", new()
    {
        Name = "Authorization",
        Type = Microsoft.OpenApi.Models.SecuritySchemeType.ApiKey,
        Scheme = "Bearer",
        BearerFormat = "JWT",
        In = Microsoft.OpenApi.Models.ParameterLocation.Header,
        Description = "JWT Authorization header using the Bearer scheme."
    });
    
    c.AddSecurityRequirement(new()
    {
        {
            new()
            {
                Reference = new() { Type = Microsoft.OpenApi.Models.ReferenceType.SecurityScheme, Id = "Bearer" }
            },
            new string[] {}
        }
    });
});

// HTTP Context Accessor
builder.Services.AddHttpContextAccessor();

// ====================================
// BUSINESS SERVICES REGISTRATION
// ====================================

// Form Services
builder.Services.AddScoped<IFormConfigurationService, FormConfigurationService>();
builder.Services.AddScoped<IWorkflowService, WorkflowService>();
builder.Services.AddScoped<ICurrentUserService, CurrentUserService>();

// Additional Services (würdest du implementieren)
builder.Services.AddScoped<IRequirementService, RequirementService>();
builder.Services.AddScoped<INotificationService, NotificationService>();
builder.Services.AddScoped<IAuditService, AuditService>();
builder.Services.AddScoped<IAnalyticsService, AnalyticsService>();

// ====================================
// EXTERNAL INTEGRATIONS
// ====================================

// HTTP Clients for external APIs
builder.Services.AddHttpClient("WorkflowApi", client =>
{
    client.BaseAddress = new Uri(builder.Configuration["ExternalApis:WorkflowApi:BaseUrl"]!);
    client.Timeout = TimeSpan.FromSeconds(30);
    client.DefaultRequestHeaders.Add("User-Agent", "FormBuilder/1.0");
});

builder.Services.AddHttpClient("NotificationApi", client =>
{
    client.BaseAddress = new Uri(builder.Configuration["ExternalApis:NotificationApi:BaseUrl"]!);
    client.Timeout = TimeSpan.FromSeconds(15);
});

// ====================================
// CACHING & PERFORMANCE
// ====================================

// Memory Caching
builder.Services.AddMemoryCache(options =>
{
    options.SizeLimit = 1000; // Maximum number of entries
    options.TrackStatistics = true;
});

// Distributed Caching (Redis würde hier hin)
builder.Services.AddStackExchangeRedisCache(options =>
{
    options.Configuration = builder.Configuration.GetConnectionString("Redis");
    options.InstanceName = "FormBuilder";
});

// Response Compression
builder.Services.AddResponseCompression(options =>
{
    options.EnableForHttps = true;
    options.Providers.Add<Microsoft.AspNetCore.ResponseCompression.BrotliCompressionProvider>();
    options.Providers.Add<Microsoft.AspNetCore.ResponseCompression.GzipCompressionProvider>();
});

// ====================================
// CORS CONFIGURATION
// ====================================

builder.Services.AddCors(options =>
{
    options.AddPolicy("FormBuilderCorsPolicy", policy =>
    {
        if (builder.Environment.IsDevelopment())
        {
            // Development: Allow any origin
            policy.AllowAnyOrigin()
                  .AllowAnyMethod()
                  .AllowAnyHeader();
        }
        else
        {
            // Production: Restrict to specific origins
            var allowedOrigins = builder.Configuration.GetSection("AllowedOrigins").Get<string[]>() ?? Array.Empty<string>();
            policy.WithOrigins(allowedOrigins)
                  .AllowCredentials()
                  .AllowAnyMethod()
                  .AllowAnyHeader();
        }
    });
});

// ====================================
// VALIDATION & MODEL BINDING
// ====================================

builder.Services.AddFluentValidation(fv =>
{
    fv.RegisterValidatorsFromAssemblyContaining<CreateFormConfigurationRequestValidator>();
    fv.DisableDataAnnotationsValidation = false;
    fv.ImplicitlyValidateChildProperties = true;
});

// Configure model validation
builder.Services.Configure<ApiBehaviorOptions>(options =>
{
    options.InvalidModelStateResponseFactory = context =>
    {
        var errors = context.ModelState
            .Where(x => x.Value?.Errors.Count > 0)
            .ToDictionary(
                kvp => kvp.Key,
                kvp => kvp.Value?.Errors.Select(e => e.ErrorMessage).ToArray()
            );

        var response = new
        {
            success = false,
            message = "Validation failed",
            errors = errors,
            metadata = new
            {
                requestId = Guid.NewGuid().ToString(),
                timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
            }
        };

        return new BadRequestObjectResult(response);
    };
});

// ====================================
// BACKGROUND SERVICES
// ====================================

// Background services for async processing
builder.Services.AddHostedService<FormAnalyticsProcessingService>();
builder.Services.AddHostedService<DeploymentMonitoringService>();
builder.Services.AddHostedService<NotificationProcessingService>();

// ====================================
// HEALTH CHECKS
// ====================================

builder.Services.AddHealthChecks()
    .AddDbContextCheck<ApplicationDbContext>()
    .AddSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")!)
    .AddRedis(builder.Configuration.GetConnectionString("Redis")!)
    .AddCheck<FormServiceHealthCheck>("form-service")
    .AddCheck<WorkflowServiceHealthCheck>("workflow-service");

// ====================================
// BUILD APP
// ====================================

var app = builder.Build();

// ====================================
// MIDDLEWARE PIPELINE CONFIGURATION
// ====================================

// Exception Handling
if (app.Environment.IsDevelopment())
{
    app.UseDeveloperExceptionPage();
    app.UseSwagger();
    app.UseSwaggerUI(c =>
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "Form Builder API v1");
        c.RoutePrefix = "swagger";
        c.EnableDeepLinking();
        c.EnableFilter();
        c.EnableTryItOutByDefault();
    });
}
else
{
    app.UseExceptionHandler("/Error");
    app.UseHsts();
}

// Security Headers
app.Use(async (context, next) =>
{
    context.Response.Headers.Add("X-Content-Type-Options", "nosniff");
    context.Response.Headers.Add("X-Frame-Options", "DENY");
    context.Response.Headers.Add("X-XSS-Protection", "1; mode=block");
    context.Response.Headers.Add("Referrer-Policy", "strict-origin-when-cross-origin");
    
    await next();
});

// Request Logging
app.UseSerilogRequestLogging(options =>
{
    options.MessageTemplate = "HTTP {RequestMethod} {RequestPath} responded {StatusCode} in {Elapsed:0.0000} ms";
    options.EnrichDiagnosticContext = (diagnosticContext, httpContext) =>
    {
        diagnosticContext.Set("UserName", httpContext.User?.Identity?.Name ?? "Anonymous");
        diagnosticContext.Set("UserAgent", httpContext.Request.Headers["User-Agent"].ToString());
        diagnosticContext.Set("RemoteIP", httpContext.Connection.RemoteIpAddress?.ToString());
    };
});

// Infrastructure
app.UseHttpsRedirection();
app.UseResponseCompression();
app.UseCors("FormBuilderCorsPolicy");

// Authentication & Authorization
app.UseAuthentication();
app.UseAuthorization();

// API Routes
app.MapControllers()
   .RequireAuthorization(); // Require authentication for all controllers by default

// Health Checks
app.MapHealthChecks("/health", new HealthCheckOptions
{
    ResponseWriter = async (context, report) =>
    {
        context.Response.ContentType = "application/json";
        var response = new
        {
            status = report.Status.ToString(),
            checks = report.Entries.Select(entry => new
            {
                name = entry.Key,
                status = entry.Value.Status.ToString(),
                exception = entry.Value.Exception?.Message,
                duration = entry.Value.Duration.ToString()
            }),
            totalDuration = report.TotalDuration.ToString()
        };
        
        await context.Response.WriteAsync(System.Text.Json.JsonSerializer.Serialize(response));
    }
});

// Detailed health check endpoint
app.MapHealthChecks("/health/detailed", new HealthCheckOptions
{
    Predicate = _ => true,
    ResponseWriter = async (context, report) =>
    {
        var response = new
        {
            status = report.Status.ToString(),
            totalDuration = report.TotalDuration.TotalMilliseconds,
            checks = report.Entries.ToDictionary(
                entry => entry.Key,
                entry => new
                {
                    status = entry.Value.Status.ToString(),
                    duration = entry.Value.Duration.TotalMilliseconds,
                    exception = entry.Value.Exception?.Message,
                    data = entry.Value.Data
                })
        };
        
        context.Response.ContentType = "application/json";
        await context.Response.WriteAsync(System.Text.Json.JsonSerializer.Serialize(response, new System.Text.Json.JsonSerializerOptions 
        { 
            WriteIndented = true 
        }));
    }
});

// ====================================
// DATABASE MIGRATION & SEEDING
// ====================================

// Auto-migrate database in development
if (app.Environment.IsDevelopment())
{
    using var scope = app.Services.CreateScope();
    var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
    
    try
    {
        // Apply pending migrations
        await context.Database.MigrateAsync();
        
        // Seed initial data
        await SeedInitialDataAsync(context);
        
        Log.Information("Database migration and seeding completed successfully");
    }
    catch (Exception ex)
    {
        Log.Error(ex, "Error during database migration or seeding");
        throw;
    }
}

// ====================================
// APPLICATION STARTUP
// ====================================

Log.Information("🚀 Form Builder API starting up...");
Log.Information("Environment: {Environment}", app.Environment.EnvironmentName);
Log.Information("Application Version: {Version}", typeof(Program).Assembly.GetName().Version);

app.Run();

// ====================================
// HELPER METHODS
// ====================================

static async Task SeedInitialDataAsync(ApplicationDbContext context)
{
    // Seed default user roles if they don't exist
    var requiredRoles = new[]
    {
        "Administrator",
        "Manager", 
        "Approver",
        "Requester",
        "TechnicalLead",
        "BusinessUser",
        "Viewer",
        "External"
    };

    // This would typically be in a UserRoles table
    // For now, just log that seeding would happen here
    Log.Information("Seeding would create {RoleCount} default roles", requiredRoles.Length);

    // Seed default form templates
    if (!await context.FormConfigurations.AnyAsync())
    {
        var defaultTemplates = new[]
        {
            new FormConfiguration
            {
                Id = Guid.NewGuid(),
                RequirementType = "Kleinanforderung",
                Name = "Standard Kleinanforderung",
                Description = "Standardformular für kleine Anforderungen",
                ConfigurationData = """
                {
                  "sections": [
                    {
                      "id": "section-1",
                      "title": "Grunddaten",
                      "description": "Grundlegende Informationen",
                      "order": 1,
                      "collapsible": false,
                      "collapsed": false
                    }
                  ],
                  "fields": [
                    {
                      "id": "field-1",
                      "type": "text",
                      "name": "shortDescription",
                      "label": "Kurzbezeichnung",
                      "required": true,
                      "section": "section-1",
                      "order": 1,
                      "width": "full",
                      "lightModeVisible": true
                    },
                    {
                      "id": "field-2", 
                      "type": "textarea",
                      "name": "detailedDescription",
                      "label": "Detailbeschreibung",
                      "required": false,
                      "section": "section-1", 
                      "order": 2,
                      "width": "full",
                      "lightModeVisible": false
                    },
                    {
                      "id": "field-3",
                      "type": "select",
                      "name": "priority",
                      "label": "Priorität", 
                      "required": true,
                      "section": "section-1",
                      "order": 3,
                      "width": "half",
                      "lightModeVisible": true,
                      "options": [
                        {"value": "low", "label": "Niedrig"},
                        {"value": "medium", "label": "Mittel"},
                        {"value": "high", "label": "Hoch"}
                      ]
                    }
                  ],
                  "permissions": {
                    "allowedRoles": ["Requester", "Approver", "Manager"],
                    "denyRoles": ["External"],
                    "adminRoles": ["Administrator"]
                  },
                  "lightMode": {
                    "enabled": true,
                    "title": "Schnellerstellung",
                    "description": "Nur die wichtigsten Felder"
                  }
                }
                """,
                Version = 1,
                IsActive = true,
                HasLightMode = true,
                CreatedAt = DateTime.UtcNow,
                ModifiedAt = DateTime.UtcNow,
                CreatedBy = "System"
            }
        };

        context.FormConfigurations.AddRange(defaultTemplates);
        await context.SaveChangesAsync();
        
        Log.Information("Seeded {TemplateCount} default form templates", defaultTemplates.Length);
    }
}

// ====================================
// GLOBAL EXCEPTION FILTER
// ====================================

public class GlobalExceptionFilter : IExceptionFilter
{
    private readonly ILogger<GlobalExceptionFilter> _logger;

    public GlobalExceptionFilter(ILogger<GlobalExceptionFilter> logger)
    {
        _logger = logger;
    }

    public void OnException(ExceptionContext context)
    {
        _logger.LogError(context.Exception, "Unhandled exception occurred: {Message}", context.Exception.Message);

        var response = new
        {
            success = false,
            message = "An error occurred while processing your request",
            metadata = new
            {
                requestId = Guid.NewGuid().ToString(),
                timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
            }
        };

        context.Result = new ObjectResult(response)
        {
            StatusCode = 500
        };
        
        context.ExceptionHandled = true;
    }
}

// ====================================
// REQUEST LOGGING FILTER
// ====================================

public class RequestLoggingFilter : IActionFilter
{
    private readonly ILogger<RequestLoggingFilter> _logger;

    public RequestLoggingFilter(ILogger<RequestLoggingFilter> logger)
    {
        _logger = logger;
    }

    public void OnActionExecuting(ActionExecutingContext context)
    {
        _logger.LogInformation("Executing action: {Controller}.{Action} with parameters: {@Parameters}",
            context.Controller.GetType().Name,
            context.ActionDescriptor.DisplayName,
            context.ActionArguments);
    }

    public void OnActionExecuted(ActionExecutedContext context)
    {
        if (context.Exception != null)
        {
            _logger.LogError(context.Exception, "Action execution failed: {Controller}.{Action}",
                context.Controller.GetType().Name,
                context.ActionDescriptor.DisplayName);
        }
    }
}
