// ====================================
// ENTITY MODELS (matching your DB schema)
// ====================================

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace YourProject.Models.Entities
{
    [Table("FormConfigurations")]
    public class FormConfiguration
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        [StringLength(100)]
        public string RequirementType { get; set; } = string.Empty;

        [StringLength(100)]
        public string? WorkflowStepId { get; set; }

        [Required]
        [StringLength(255)]
        public string Name { get; set; } = string.Empty;

        [StringLength(1000)]
        public string? Description { get; set; }

        [Required]
        [Column(TypeName = "NVARCHAR(MAX)")]
        public string ConfigurationData { get; set; } = string.Empty; // JSON

        public int Version { get; set; } = 1;
        public bool IsActive { get; set; } = true;
        public bool HasLightMode { get; set; } = true;

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime ModifiedAt { get; set; } = DateTime.UtcNow;

        [Required]
        [StringLength(255)]
        public string CreatedBy { get; set; } = string.Empty;

        // Navigation properties
        public virtual ICollection<FormDeployment> Deployments { get; set; } = new List<FormDeployment>();
        public virtual ICollection<FormSubmission> Submissions { get; set; } = new List<FormSubmission>();
    }

    [Table("FormDeployments")]
    public class FormDeployment
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        public Guid FormConfigurationId { get; set; }

        public int Version { get; set; }

        [Required]
        [StringLength(50)]
        public string Status { get; set; } = "pending_review"; // pending_review, approved, rejected, deployed, failed

        [StringLength(50)]
        public string TargetEnvironment { get; set; } = "production";

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

        [Required]
        [StringLength(255)]
        public string CreatedBy { get; set; } = string.Empty;

        public DateTime? ReviewedAt { get; set; }

        [StringLength(255)]
        public string? ReviewedBy { get; set; }

        [StringLength(1000)]
        public string? ReviewComment { get; set; }

        public DateTime? ApprovedAt { get; set; }

        [StringLength(255)]
        public string? ApprovedBy { get; set; }

        public DateTime? DeployedAt { get; set; }

        [StringLength(1000)]
        public string? ErrorMessage { get; set; }

        // Navigation properties
        [ForeignKey("FormConfigurationId")]
        public virtual FormConfiguration FormConfiguration { get; set; } = null!;
    }

    [Table("FormSubmissions")]
    public class FormSubmission
    {
        [Key]
        public Guid Id { get; set; }

        [Required]
        public Guid RequirementId { get; set; }

        [Required]
        public Guid FormConfigurationId { get; set; }

        [StringLength(100)]
        public string? WorkflowStepId { get; set; }

        [Required]
        [Column(TypeName = "NVARCHAR(MAX)")]
        public string SubmissionData { get; set; } = string.Empty; // JSON

        [Required]
        [StringLength(50)]
        public string Status { get; set; } = "draft"; // draft, submitted, approved, rejected

        public bool IsLightMode { get; set; }

        public DateTime? SubmittedAt { get; set; }

        [StringLength(255)]
        public string? SubmittedBy { get; set; }

        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime ModifiedAt { get; set; } = DateTime.UtcNow;

        [Required]
        [StringLength(255)]
        public string CreatedBy { get; set; } = string.Empty;

        // Navigation properties
        [ForeignKey("FormConfigurationId")]
        public virtual FormConfiguration FormConfiguration { get; set; } = null!;
    }

    // Validation result class for business logic
    public class ValidationResult
    {
        public bool IsValid { get; set; }
        public List<ValidationError> Errors { get; set; } = new();
        public List<ValidationError> Warnings { get; set; } = new();
        public List<ValidationError> Suggestions { get; set; } = new();
    }

    public class ValidationError
    {
        public string Field { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string Code { get; set; } = string.Empty;
        public string Severity { get; set; } = "error"; // error, warning, info
        public object? Value { get; set; }
    }
}

// ====================================
// SERVICE INTERFACE
// ====================================

using YourProject.Models.Entities;

namespace YourProject.Services
{
    public interface IFormConfigurationService
    {
        // Form Configuration CRUD
        Task<FormConfiguration?> GetFormConfigurationAsync(string requirementType, List<string> userRoles, string currentUserId);
        Task<FormConfiguration?> GetFormConfigurationByIdAsync(Guid id, string currentUserId);
        Task<FormConfiguration> CreateFormConfigurationAsync(FormConfiguration formConfiguration);
        Task<FormConfiguration> UpdateFormConfigurationAsync(FormConfiguration formConfiguration);
        Task DeleteFormConfigurationAsync(Guid id);
        Task<List<FormConfiguration>> GetAllFormConfigurationsAsync(string? requirementType = null, bool includeInactive = false);

        // Deployments (4-Eyes Principle)
        Task<FormDeployment> CreateDeploymentAsync(FormDeployment deployment);
        Task<FormDeployment> UpdateDeploymentAsync(FormDeployment deployment);
        Task<FormDeployment?> GetDeploymentByIdAsync(Guid deploymentId);
        Task<List<FormDeployment>> GetDeploymentHistoryAsync(Guid formConfigurationId);
        Task ExecuteDeploymentAsync(Guid deploymentId);

        // Form Submissions
        Task<FormSubmission> CreateSubmissionAsync(FormSubmission submission);
        Task<FormSubmission?> GetSubmissionByIdAsync(Guid submissionId, string currentUserId);
        Task<List<FormSubmission>> GetSubmissionsByRequirementAsync(Guid requirementId);
        Task<bool> HasSubmissionsAsync(Guid formConfigurationId);

        // Validation
        Task<ValidationResult> ValidateFormConfigurationAsync(object formData);
        Task<ValidationResult> ValidateSubmissionAsync(Guid formConfigurationId, Dictionary<string, object> fieldValues);

        // Analytics & Usage
        Task<object> GetFormUsageStatsAsync(Guid formConfigurationId, DateTime? startDate = null, DateTime? endDate = null);

        // Templates
        Task<List<object>> GetFormTemplatesAsync(string? category = null);
        Task<FormConfiguration> CreateFormFromTemplateAsync(Guid templateId, string name, string requirementType, Dictionary<string, object>? fieldMappings = null);

        // Permissions
        Task<object> GetFormPermissionsAsync(Guid formConfigurationId, string currentUserId);

        // Import/Export
        Task<byte[]> ExportFormConfigurationAsync(Guid formConfigurationId, string format);
        Task<object> ImportFormConfigurationAsync(Stream fileStream, bool overwriteExisting, bool validateOnly);
    }

    public interface IWorkflowService
    {
        Task<List<WorkflowStep>> GetWorkflowStepsAsync(string requirementType);
    }

    public interface ICurrentUserService
    {
        string GetCurrentUserId();
        string GetCurrentUserName();
        List<string> GetCurrentUserRoles();
    }

    // Simple workflow step model for form integration
    public class WorkflowStep
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
    }
}

// ====================================
// SERVICE IMPLEMENTATION
// ====================================

using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using YourProject.Data;
using YourProject.Models.Entities;

namespace YourProject.Services.Implementation
{
    public class FormConfigurationService : IFormConfigurationService
    {
        private readonly ApplicationDbContext _context;
        private readonly ILogger<FormConfigurationService> _logger;
        private readonly ICurrentUserService _currentUserService;

        public FormConfigurationService(
            ApplicationDbContext context,
            ILogger<FormConfigurationService> logger,
            ICurrentUserService currentUserService)
        {
            _context = context;
            _logger = logger;
            _currentUserService = currentUserService;
        }

        // ==================== FORM CONFIGURATION CRUD ====================

        public async Task<FormConfiguration?> GetFormConfigurationAsync(
            string requirementType, 
            List<string> userRoles, 
            string currentUserId)
        {
            var config = await _context.FormConfigurations
                .Where(fc => fc.RequirementType == requirementType && fc.IsActive)
                .OrderByDescending(fc => fc.Version)
                .FirstOrDefaultAsync();

            if (config != null)
            {
                // Apply role-based filtering to configuration data
                config.ConfigurationData = ApplyPermissionFiltering(config.ConfigurationData, userRoles);
            }

            return config;
        }

        public async Task<FormConfiguration?> GetFormConfigurationByIdAsync(Guid id, string currentUserId)
        {
            return await _context.FormConfigurations
                .Include(fc => fc.Deployments)
                .FirstOrDefaultAsync(fc => fc.Id == id);
        }

        public async Task<FormConfiguration> CreateFormConfigurationAsync(FormConfiguration formConfiguration)
        {
            // Validate configuration data
            var validationResult = await ValidateFormConfigurationAsync(formConfiguration.ConfigurationData);
            if (!validationResult.IsValid)
            {
                throw new InvalidOperationException($"Form configuration is invalid: {string.Join(", ", validationResult.Errors.Select(e => e.Message))}");
            }

            _context.FormConfigurations.Add(formConfiguration);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Created form configuration: {FormId} for requirement type: {RequirementType}",
                formConfiguration.Id, formConfiguration.RequirementType);

            return formConfiguration;
        }

        public async Task<FormConfiguration> UpdateFormConfigurationAsync(FormConfiguration formConfiguration)
        {
            // Validate configuration data
            var validationResult = await ValidateFormConfigurationAsync(formConfiguration.ConfigurationData);
            if (!validationResult.IsValid)
            {
                throw new InvalidOperationException($"Form configuration is invalid: {string.Join(", ", validationResult.Errors.Select(e => e.Message))}");
            }

            _context.FormConfigurations.Update(formConfiguration);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Updated form configuration: {FormId}", formConfiguration.Id);

            return formConfiguration;
        }

        public async Task DeleteFormConfigurationAsync(Guid id)
        {
            var config = await _context.FormConfigurations.FindAsync(id);
            if (config == null)
            {
                throw new InvalidOperationException("Form configuration not found");
            }

            // Check if there are any submissions
            var hasSubmissions = await _context.FormSubmissions.AnyAsync(fs => fs.FormConfigurationId == id);
            if (hasSubmissions)
            {
                throw new InvalidOperationException("Cannot delete form configuration with existing submissions");
            }

            _context.FormConfigurations.Remove(config);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Deleted form configuration: {FormId}", id);
        }

        public async Task<List<FormConfiguration>> GetAllFormConfigurationsAsync(string? requirementType = null, bool includeInactive = false)
        {
            var query = _context.FormConfigurations.AsQueryable();

            if (!string.IsNullOrEmpty(requirementType))
            {
                query = query.Where(fc => fc.RequirementType == requirementType);
            }

            if (!includeInactive)
            {
                query = query.Where(fc => fc.IsActive);
            }

            return await query.OrderBy(fc => fc.RequirementType).ThenBy(fc => fc.Name).ToListAsync();
        }

        // ==================== DEPLOYMENTS ====================

        public async Task<FormDeployment> CreateDeploymentAsync(FormDeployment deployment)
        {
            _context.FormDeployments.Add(deployment);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Created deployment: {DeploymentId} for form: {FormId}",
                deployment.Id, deployment.FormConfigurationId);

            return deployment;
        }

        public async Task<FormDeployment> UpdateDeploymentAsync(FormDeployment deployment)
        {
            _context.FormDeployments.Update(deployment);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Updated deployment: {DeploymentId}", deployment.Id);

            return deployment;
        }

        public async Task<FormDeployment?> GetDeploymentByIdAsync(Guid deploymentId)
        {
            return await _context.FormDeployments
                .Include(fd => fd.FormConfiguration)
                .FirstOrDefaultAsync(fd => fd.Id == deploymentId);
        }

        public async Task<List<FormDeployment>> GetDeploymentHistoryAsync(Guid formConfigurationId)
        {
            return await _context.FormDeployments
                .Where(fd => fd.FormConfigurationId == formConfigurationId)
                .OrderByDescending(fd => fd.CreatedAt)
                .ToListAsync();
        }

        public async Task ExecuteDeploymentAsync(Guid deploymentId)
        {
            var deployment = await GetDeploymentByIdAsync(deploymentId);
            if (deployment == null)
            {
                throw new InvalidOperationException("Deployment not found");
            }

            if (deployment.Status != "approved")
            {
                throw new InvalidOperationException("Deployment must be approved before execution");
            }

            try
            {
                // Here you would implement the actual deployment logic
                // For example: sync to production database, update caches, etc.
                
                // Simulate deployment process
                await Task.Delay(1000);

                // Mark as deployed
                deployment.Status = "deployed";
                deployment.DeployedAt = DateTime.UtcNow;

                await UpdateDeploymentAsync(deployment);

                _logger.LogInformation("Successfully executed deployment: {DeploymentId}", deploymentId);
            }
            catch (Exception ex)
            {
                deployment.Status = "failed";
                deployment.ErrorMessage = ex.Message;
                await UpdateDeploymentAsync(deployment);

                _logger.LogError(ex, "Failed to execute deployment: {DeploymentId}", deploymentId);
                throw;
            }
        }

        // ==================== FORM SUBMISSIONS ====================

        public async Task<FormSubmission> CreateSubmissionAsync(FormSubmission submission)
        {
            _context.FormSubmissions.Add(submission);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Created form submission: {SubmissionId} for requirement: {RequirementId}",
                submission.Id, submission.RequirementId);

            return submission;
        }

        public async Task<FormSubmission?> GetSubmissionByIdAsync(Guid submissionId, string currentUserId)
        {
            return await _context.FormSubmissions
                .Include(fs => fs.FormConfiguration)
                .FirstOrDefaultAsync(fs => fs.Id == submissionId);
        }

        public async Task<List<FormSubmission>> GetSubmissionsByRequirementAsync(Guid requirementId)
        {
            return await _context.FormSubmissions
                .Where(fs => fs.RequirementId == requirementId)
                .OrderByDescending(fs => fs.CreatedAt)
                .ToListAsync();
        }

        public async Task<bool> HasSubmissionsAsync(Guid formConfigurationId)
        {
            return await _context.FormSubmissions
                .AnyAsync(fs => fs.FormConfigurationId == formConfigurationId);
        }

        // ==================== VALIDATION ====================

        public async Task<ValidationResult> ValidateFormConfigurationAsync(object formData)
        {
            var result = new ValidationResult { IsValid = true };

            try
            {
                // Parse configuration data
                dynamic config;
                if (formData is string jsonString)
                {
                    config = JsonConvert.DeserializeObject(jsonString);
                }
                else
                {
                    config = formData;
                }

                // Validate structure
                if (config?.fields == null)
                {
                    result.Errors.Add(new ValidationError
                    {
                        Field = "fields",
                        Message = "Form must have at least one field",
                        Code = "MISSING_FIELDS"
                    });
                    result.IsValid = false;
                }

                if (config?.sections == null)
                {
                    result.Errors.Add(new ValidationError
                    {
                        Field = "sections",
                        Message = "Form must have at least one section",
                        Code = "MISSING_SECTIONS"
                    });
                    result.IsValid = false;
                }

                // Additional validation logic here...
                
            }
            catch (Exception ex)
            {
                result.Errors.Add(new ValidationError
                {
                    Field = "configuration",
                    Message = $"Invalid configuration format: {ex.Message}",
                    Code = "INVALID_FORMAT"
                });
                result.IsValid = false;
            }

            return result;
        }

        public async Task<ValidationResult> ValidateSubmissionAsync(Guid formConfigurationId, Dictionary<string, object> fieldValues)
        {
            var result = new ValidationResult { IsValid = true };

            var formConfig = await GetFormConfigurationByIdAsync(formConfigurationId, _currentUserService.GetCurrentUserId());
            if (formConfig == null)
            {
                result.Errors.Add(new ValidationError
                {
                    Field = "form",
                    Message = "Form configuration not found",
                    Code = "FORM_NOT_FOUND"
                });
                result.IsValid = false;
                return result;
            }

            try
            {
                var configData = JsonConvert.DeserializeObject<dynamic>(formConfig.ConfigurationData);
                var fields = JsonConvert.DeserializeObject<List<dynamic>>(configData?.fields?.ToString() ?? "[]");

                // Validate required fields
                foreach (var field in fields)
                {
                    var fieldName = field.name?.ToString();
                    var isRequired = field.required ?? false;

                    if (isRequired && !fieldValues.ContainsKey(fieldName))
                    {
                        result.Errors.Add(new ValidationError
                        {
                            Field = fieldName,
                            Message = $
