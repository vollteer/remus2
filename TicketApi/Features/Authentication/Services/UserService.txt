using Microsoft.EntityFrameworkCore;
using TicketApi.Shared.Models;
using TicketApi.Shared.Models.Entities;

namespace TicketApi.Features.Authentication.Services
{
    public class UserService(IHttpContextAccessor httpContextAccessor, ILogger<UserService> logger, RequirementsDbContext contextReq,
        RemusContext context) : IUserService
    {
        private readonly RemusContext _context = context;

        private readonly RequirementsDbContext _contextReq = contextReq;
        private readonly IHttpContextAccessor _httpContextAccessor = httpContextAccessor;
        private readonly ILogger<UserService> _logger = logger;

        public async Task<User?> GetCurrentUserObject(CancellationToken cancellationToken = default)
        {
            var userId = await GetCurrentUserIdAsync();
            var user = await _context.RemusUserbsts.FirstOrDefaultAsync(u => u.UserId == userId, cancellationToken);

            if (user == null)
            {
                // Return a default/system user for development
                return new User 
                { 
                    UserId = userId, 
                    Name = userId == "system" ? "System User" : userId,
                    Email = $"{userId}@example.com"
                };
            }
            if (user.Doe != null)
            {
                user.DoePatternList = DOEPatternList(user.Doe);
            }
            user.UserPermissionList = await GetUserPermissionList(user.UserId, user.DoePatternList);

            return user;
        }

        public static List<string> DOEPatternList(string DOE)
        {
            List<string> listDOEPattern = [];

            while (DOE.Length > 0)
            {
                listDOEPattern.Add(DOE);
                DOE = DOE[..^1];
            }

            return listDOEPattern;
        }

        public async Task<List<Berechtigung>> GetUserPermissionList(string user, List<string>? patternListDoe)
        {
            return await _context.Berechtigungs
            .Where
            (x => x.Userid!.Equals(user) ||
            patternListDoe.Contains(x.Darfdoe!) ||
            x.Gruppenname.Contains("DOE_DARF")
            ).ToListAsync();
        }
        public async Task<List<string>> GetUserRolesAsync(CancellationToken cancel)
        {
            string userid = await GetCurrentUserIdAsync();
            try
            {
                var userRoles = await (from ura in _contextReq.UserRoleAssignments
                                       join ur in _contextReq.UserRoles on ura.RoleId equals ur.Id
                                       where ura.UserId == userid && ur.IsActive == true
                                       select ur.RoleName)
                                       .ToListAsync();

                return userRoles.Any() ? userRoles : new List<string> { "User" };
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Could not load user roles for {UserId}", userid);
                return new List<string> { "User" };
            }
        }

        public async Task<string> GetCurrentUserIdAsync()
        {
            var httpContext = _httpContextAccessor.HttpContext;
            var username = httpContext?.Items["UserId"]?.ToString();

            return username ?? "system";
        }
    }
}