using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using TicketApi.Features.Authentication.Enums;
using TicketApi.Features.Authentication.Services;
using TicketApi.Shared.Models;

namespace TicketApi.Features.TicketSearch.Services
{
    public class TicketService(RemusContext context, ILogger<TicketService> logger, IUserService userService) : ITicketService
    {
        private readonly RemusContext _context = context;
        private readonly ILogger<ITicketService> _logger = logger;
        private readonly IUserService _userService = userService;

        public async Task<Expression<Func<Ticket, bool>>> GetUserPermissionFilterAsync(string userId)
        {
            var user = await _userService.GetCurrentUserObject();
            if (user == null)
            {
                return t => false;
            }

            var doePrefix = !user.Doe.IsNullOrEmpty() ? user.Doe[..2] : string.Empty;

            return t =>
                // 1. assigned to user
                t.BearbeiterUserid != null &&
                t.BearbeiterUserid == userId ||

                // 2. user edited anfo once
                _context.Arbeitslogbuches.Any(en =>
                en.IdAnfo == t.AnfoNr && en.BearbeiterUserid == userId) ||

                // 3. permission DOE
                _context.Berechtigungs.Any(b =>
                    b.Userid == userId &&
                    b.Gruppenname.Equals(SpecialPermissions.USER_DARF_DOE) &&
                    b.Darfdoe != null) ||

                // 4. permission vorhaben
                _context.Berechtigungs.Any(b =>
                    b.Userid == userId &&
                    b.Gruppenname.Equals(SpecialPermissions.USER_DARF_VORHABEN) &&
                    b.Vorhabenid != null &&
                    t.VorhabenNr == b.Vorhabenid) ||

                // 5. Permission REAOBJ
                _context.Berechtigungs.Any(b =>
                    b.Userid == userId &&
                    b.Gruppenname.Equals(SpecialPermissions.USER_DARF_REAOBJ) &&
                    b.Reaobjid != null &&
                    t.ReaobjId == b.Reaobjid) ||

                // 6. Permission DOE prefix
                t.ErstellerDoe != null &&
                    t.ErstellerDoe.StartsWith(doePrefix);
        }

        public async Task<IQueryable<Ticket>> GetTicketsAsQueryable(string userId)
        {
            var filter = await GetUserPermissionFilterAsync(userId);
            return _context.Tickets.Where(filter);
        }

        public async Task<Ticket> GetByIdAsync(int ticketId, string userId, CancellationToken cancel)
        {
            var filter = await GetUserPermissionFilterAsync(userId);

            return await _context.Tickets
                .Where(t => t.AnfoNr == ticketId)
                .Where(filter)
                .FirstOrDefaultAsync(cancel);
        }
    }
}