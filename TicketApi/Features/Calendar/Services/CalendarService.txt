//using Microsoft.EntityFrameworkCore;
//using TicketApi.Features.Calendar.DTO;
//using TicketApi.Features.TicketSearch.Services;
//using TicketApi.Features.WorkflowBuilder.DTO.RequirementsApi.DTOs;
//using TicketApi.Features.WorkflowBuilder.Services;
//using TicketApi.Shared.Models.Entities;

//namespace TicketApi.Features.Calendar.Services
//{
//    public class CalendarService : ICalendarService
//    {
//        private readonly RequirementsDbContext _context;
//        private readonly ILogger<CalendarService> _logger;
//        private readonly ITicketService _ticketService;
//        private readonly IWorkLogService _workLogService;

//        public CalendarService(
//    RequirementsDbContext context,
//    ILogger<CalendarService> logger,
//    ITicketService ticketService,
//    IWorkLogService workLogService)
//        {
//            _context = context;
//            _logger = logger;
//            _ticketService = ticketService;
//            _workLogService = workLogService;
//        }
//        public async Task<ServiceResult<CalendarEventsResponse>> GetCalendarEventsAsync(CalendarEventsRequest request, string userId)
//        {
//            try
//            {
//                _logger.LogInformation("Fetching calendar events for user: {UserId} with filters: {@Filters}", userId, request);

//                var query = _context.Requirements
//                    .Where(r => r.DueDate.HasValue || r.CurrentStepDueDate.HasValue)
//                    .AsQueryable();

//                // Apply filters
//                query = ApplyFilters(query, request);

//                // Check user permissions - only show requirements user has access to
//                query = await ApplyUserPermissions(query, userId);

//                var requirements = await query
//                    .Include(r => r.AssignedUser)
//                    .Include(r => r.WorkflowSteps)
//                    .OrderBy(r => r.DueDate ?? r.CurrentStepDueDate)
//                    .ToListAsync();

//                var events = await ConvertRequirementsToEvents(requirements, request);

//                var statistics = CalculateStatistics(events);

//                var response = new CalendarEventsResponse
//                {
//                    Events = events.OrderBy(e => e.Date).ToList(),
//                    TotalCount = events.Count,
//                    Statistics = statistics
//                };

//                return ServiceResult<CalendarEventsResponse>.Success(response);
//            }
//            catch (Exception ex)
//            {
//                _logger.LogError(ex, "Error fetching calendar events for user: {UserId}", userId);
//                return ServiceResult<CalendarEventsResponse>.Failure("Error fetching calendar events");
//            }
//        }

//        public async Task<ServiceResult<CalendarEventDetailDto>> GetCalendarEventDetailAsync(string eventId, string userId)
//        {
//            try
//            {
//                var (requirementId, eventType) = ParseEventId(eventId);
//                if (string.IsNullOrEmpty(requirementId))
//                {
//                    return ServiceResult<CalendarEventDetailDto>.Failure("Invalid event ID format");
//                }

//                var requirement = await _context.Requirements
//                    .Include(r => r.AssignedUser)
//                    .Include(r => r.WorkflowSteps)
//                    .Include(r => r.ExternalReferences)
//                    .FirstOrDefaultAsync(r => r.Id == requirementId);

//                if (requirement == null)
//                {
//                    return ServiceResult<CalendarEventDetailDto>.Failure("Requirement not found");
//                }

//                // Check user permissions
//                if (!await HasUserAccessToRequirement(requirement, userId))
//                {
//                    return ServiceResult<CalendarEventDetailDto>.Failure("Access denied");
//                }

//                var eventDetail = MapToEventDetail(requirement, eventId, eventType);

//                return ServiceResult<CalendarEventDetailDto>.Success(eventDetail);
//            }
//            catch (Exception ex)
//            {
//                _logger.LogError(ex, "Error fetching calendar event detail for ID: {EventId}", eventId);
//                return ServiceResult<CalendarEventDetailDto>.Failure("Error fetching event details");
//            }
//        }

//        public async Task<ServiceResult<bool>> UpdateDeadlineAsync(string requirementId, UpdateDeadlineRequest request, string userId)
//        {
//            try
//            {
//                var requirement = await _context.Requirements.FindAsync(requirementId);
//                if (requirement == null)
//                {
//                    return ServiceResult<bool>.Failure("Requirement not found");
//                }

//                // Check user permissions
//                if (!await HasUserAccessToRequirement(requirement, userId))
//                {
//                    return ServiceResult<bool>.Failure("Access denied");
//                }

//                var oldDeadline = requirement.DueDate;
//                requirement.DueDate = request.NewDeadline;
//                requirement.UpdatedAt = DateTime.UtcNow;

//                // Log the change
//                await _workLogService.LogActionAsync(new WorkLogEntry
//                {
//                    Id = Guid.NewGuid().ToString(),
//                    RequirementId = requirementId,
//                    UserId = userId,
//                    Action = "deadline_updated",
//                    Description = $"Deadline updated from {oldDeadline:yyyy-MM-dd} to {request.NewDeadline:yyyy-MM-dd}. Reason: {request.Reason}",
//                    CreatedAt = DateTime.UtcNow
//                });

//                await _context.SaveChangesAsync();

//                return ServiceResult<bool>.Success(true);
//            }
//            catch (Exception ex)
//            {
//                _logger.LogError(ex, "Error updating deadline for requirement: {RequirementId}", requirementId);
//                return ServiceResult<bool>.Failure("Error updating deadline");
//            }
//        }

//        public async Task<ServiceResult<CalendarStatistics>> GetCalendarStatisticsAsync(CalendarStatisticsRequest request, string userId)
//        {
//            try
//            {
//                var query = _context.Requirements
//                    .Where(r => r.DueDate.HasValue || r.CurrentStepDueDate.HasValue);

//                query = await ApplyUserPermissions(query, userId);

//                var requirements = await query.ToListAsync();
//                var events = await ConvertRequirementsToEvents(requirements, new CalendarEventsRequest());
//                var statistics = CalculateStatistics(events);

//                return ServiceResult<CalendarStatistics>.Success(statistics);
//            }
//            catch (Exception ex)
//            {
//                _logger.LogError(ex, "Error fetching calendar statistics for user: {UserId}", userId);
//                return ServiceResult<CalendarStatistics>.Failure("Error fetching statistics");
//            }
//        }

//        public async Task<ServiceResult<CalendarEventDto>> CreateCalendarEventAsync(CreateCalendarEventRequest request, string userId)
//        {
//            try
//            {
//                // This would create standalone calendar events (meetings, reviews, etc.)
//                // For now, we'll return a placeholder
//                var calendarEvent = new CalendarEventDto
//                {
//                    Id = Guid.NewGuid().ToString(),
//                    Title = request.Title,
//                    Date = request.Date.ToString("yyyy-MM-dd"),
//                    Type = request.Type,
//                    Description = request.Description
//                };

//                // In a real implementation, you'd save this to a CalendarEvents table
//                return ServiceResult<CalendarEventDto>.Success(calendarEvent);
//            }
//            catch (Exception ex)
//            {
//                _logger.LogError(ex, "Error creating calendar event for user: {UserId}", userId);
//                return ServiceResult<CalendarEventDto>.Failure("Error creating calendar event");
//            }
//        }

//        public async Task<ServiceResult<List<CalendarEventDto>>> GetUserUpcomingDeadlinesAsync(string userId, int days)
//        {
//            try
//            {
//                var cutoffDate = DateTime.Now.AddDays(days);

//                var query = _context.Requirements
//                    .Where(r => (r.DueDate.HasValue && r.DueDate <= cutoffDate && r.DueDate >= DateTime.Now) ||
//                               (r.CurrentStepDueDate.HasValue && r.CurrentStepDueDate <= cutoffDate && r.CurrentStepDueDate >= DateTime.Now))
//                    .Where(r => r.AssignedUserId == userId || r.CreatedBy == userId);

//                var requirements = await query
//                    .Include(r => r.AssignedUser)
//                    .OrderBy(r => r.DueDate ?? r.CurrentStepDueDate)
//                    .ToListAsync();

//                var events = await ConvertRequirementsToEvents(requirements, new CalendarEventsRequest());

//                return ServiceResult<List<CalendarEventDto>>.Success(events);
//            }
//            catch (Exception ex)
//            {
//                _logger.LogError(ex, "Error fetching upcoming deadlines for user: {UserId}", userId);
//                return ServiceResult<List<CalendarEventDto>>.Failure("Error fetching upcoming deadlines");
//            }
//        }

//        public async Task<ServiceResult<List<CalendarEventDto>>> GetOverdueEventsAsync(string userId)
//        {
//            try
//            {
//                var query = _context.Requirements
//                    .Where(r => ((r.DueDate.HasValue && r.DueDate < DateTime.Now) ||
//                                (r.CurrentStepDueDate.HasValue && r.CurrentStepDueDate < DateTime.Now)) &&
//                               r.Status != "Completed");

//                query = await ApplyUserPermissions(query, userId);

//                var requirements = await query
//                    .Include(r => r.AssignedUser)
//                    .OrderBy(r => r.DueDate ?? r.CurrentStepDueDate)
//                    .ToListAsync();

//                var events = await ConvertRequirementsToEvents(requirements, new CalendarEventsRequest { ShowOverdue = true, ShowUpcoming = false });

//                return ServiceResult<List<CalendarEventDto>>.Success(events);
//            }
//            catch (Exception ex)
//            {
//                _logger.LogError(ex, "Error fetching overdue events for user: {UserId}", userId);
//                return ServiceResult<List<CalendarEventDto>>.Failure("Error fetching overdue events");
//            }
//        }

//        public async Task<ServiceResult<List<CalendarEventDto>>> GetAwsReleaseEventsAsync(CalendarEventsRequest request, string userId)
//        {
//            try
//            {
//                var query = _context.Requirements
//                    .Where(r => r.Type == "AWS-Release" && (r.DueDate.HasValue || r.CurrentStepDueDate.HasValue));

//                query = await ApplyUserPermissions(query, userId);
//                query = ApplyFilters(query, request);

//                var requirements = await query
//                    .Include(r => r.AssignedUser)
//                    .OrderBy(r => r.DueDate ?? r.CurrentStepDueDate)
//                    .ToListAsync();

//                var events = await ConvertRequirementsToEvents(requirements, request);

//                return ServiceResult<List<CalendarEventDto>>.Success(events);
//            }
//            catch (Exception ex)
//            {
//                _logger.LogError(ex, "Error fetching AWS release events for user: {UserId}", userId);
//                return ServiceResult<List<CalendarEventDto>>.Failure("Error fetching AWS release events");
//            }
//        }

//        #region Private Helper Methods

//        private IQueryable<Requirement> ApplyFilters(IQueryable<Requirement> query, CalendarEventsRequest request)
//        {
//            if (request.RequirementTypes?.Any() == true)
//            {
//                query = query.Where(r => request.RequirementTypes.Contains(r.Type));
//            }

//            if (request.Priorities?.Any() == true)
//            {
//                query = query.Where(r => request.Priorities.Contains(r.Priority));
//            }

//            if (request.Statuses?.Any() == true)
//            {
//                query = query.Where(r => request.Statuses.Contains(r.Status));
//            }

//            if (request.StartDate.HasValue)
//            {
//                query = query.Where(r =>
//                    (r.DueDate.HasValue && r.DueDate >= request.StartDate) ||
//                    (r.CurrentStepDueDate.HasValue && r.CurrentStepDueDate >= request.StartDate));
//            }

//            if (request.EndDate.HasValue)
//            {
//                query = query.Where(r =>
//                    (r.DueDate.HasValue && r.DueDate <= request.EndDate) ||
//                    (r.CurrentStepDueDate.HasValue && r.CurrentStepDueDate <= request.EndDate));
//            }

//            return query;
//        }

//        private async Task<IQueryable<Requirement>> ApplyUserPermissions(IQueryable<Requirement> query, string userId)
//        {
//            // Apply user-specific permissions
//            // This is a simplified example - you'd implement your actual permission logic
//            return query.Where(r =>
//                r.AssignedUserId == userId ||
//                r.CreatedBy == userId ||
//                r.IsPublic == true);
//        }

//        private async Task<bool> HasUserAccessToRequirement(Requirement requirement, string userId)
//        {
//            // Check if user has access to this requirement
//            return requirement.AssignedUserId == userId ||
//                   requirement.CreatedBy == userId ||
//                   requirement.IsPublic == true;
//        }

//        private async Task<List<CalendarEventDto>> ConvertRequirementsToEvents(List<Requirement> requirements, CalendarEventsRequest request)
//        {
//            var events = new List<CalendarEventDto>();

//            foreach (var req in requirements)
//            {
//                // Add main deadline event
//                if (req.DueDate.HasValue)
//                {
//                    var isOverdue = req.DueDate < DateTime.Now && req.Status != "Completed";

//                    if ((isOverdue && request.ShowOverdue) || (!isOverdue && request.ShowUpcoming))
//                    {
//                        events.Add(new CalendarEventDto
//                        {
//                            Id = $"{req.Id}-deadline",
//                            Title = $"📅 {req.Title}",
//                            RequirementNumber = req.RequirementNumber,
//                            Date = req.DueDate.Value.ToString("yyyy-MM-dd"),
//                            Type = "deadline",
//                            RequirementType = req.Type,
//                            Priority = req.Priority,
//                            Status = req.Status,
//                            Assignee = req.AssignedUser?.Name,
//                            Description = $"Deadline: {req.Description}",
//                            IsOverdue = isOverdue,
//                            RequirementId = req.Id
//                        });
//                    }
//                }

//                // Add current step deadline
//                if (req.CurrentStepDueDate.HasValue && !string.IsNullOrEmpty(req.CurrentWorkflowStep))
//                {
//                    var stepIsOverdue = req.CurrentStepDueDate < DateTime.Now && req.Status != "Completed";

//                    if ((stepIsOverdue && request.ShowOverdue) || (!stepIsOverdue && request.ShowUpcoming))
//                    {
//                        events.Add(new CalendarEventDto
//                        {
//                            Id = $"{req.Id}-step",
//                            Title = $"🎯 {req.CurrentWorkflowStep}",
//                            RequirementNumber = req.RequirementNumber,
//                            Date = req.CurrentStepDueDate.Value.ToString("yyyy-MM-dd"),
//                            Type = "milestone",
//                            RequirementType = req.Type,
//                            Priority = req.Priority,
//                            Status = req.Status,
//                            Assignee = req.AssignedUser?.Name,
//                            WorkflowStep = req.CurrentWorkflowStep,
//                            Description = $"Workflow Schritt: {req.CurrentWorkflowStep} für {req.Title}",
//                            IsOverdue = stepIsOverdue,
//                            RequirementId = req.Id
//                        });
//                    }
//                }

//                // Add release events for AWS/AWG releases
//                if ((req.Type == "AWS-Release" || req.Type == "AWG-Release") && req.DueDate.HasValue)
//                {
//                    var releaseDate = req.DueDate.Value.AddDays(1);

//                    events.Add(new CalendarEventDto
//                    {
//                        Id = $"{req.Id}-release",
//                        Title = $"🚀 {req.Type} Go-Live",
//                        RequirementNumber = req.RequirementNumber,
//                        Date = releaseDate.ToString("yyyy-MM-dd"),
//                        Type = "release",
//                        RequirementType = req.Type,
//                        Priority = req.Priority,
//                        Status = req.Status,
//                        Assignee = req.AssignedUser?.Name,
//                        Description = $"Release/Go-Live: {req.Title}",
//                        IsOverdue = false,
//                        RequirementId = req.Id
//                    });
//                }
//            }

//            return events;
//        }

//        private CalendarStatistics CalculateStatistics(List<CalendarEventDto> events)
//        {
//            return new CalendarStatistics
//            {
//                TotalEvents = events.Count,
//                OverdueCount = events.Count(e => e.IsOverdue),
//                ThisWeekCount = events.Count(e =>
//                {
//                    var eventDate = DateTime.Parse(e.Date);
//                    var today = DateTime.Now.Date;
//                    var weekFromNow = today.AddDays(7);
//                    return eventDate >= today && eventDate <= weekFromNow;
//                }),
//                AwsReleaseCount = events.Count(e => e.RequirementType == "AWS-Release"),
//                AwgReleaseCount = events.Count(e => e.RequirementType == "AWG-Release"),
//                CriticalCount = events.Count(e => e.Priority == "critical"),
//                EventsByType = events.GroupBy(e => e.Type).ToDictionary(g => g.Key, g => g.Count()),
//                EventsByRequirementType = events.GroupBy(e => e.RequirementType).ToDictionary(g => g.Key, g => g.Count())
//            };
//        }

//        private (string requirementId, string eventType) ParseEventId(string eventId)
//        {
//            var parts = eventId.Split('-');
//            if (parts.Length < 3) return ("", "");

//            var requirementId = string.Join("-", parts.Take(parts.Length - 1));
//            var eventType = parts.Last();

//            return (requirementId, eventType);
//        }

//        private CalendarEventDetailDto MapToEventDetail(Requirement requirement, string eventId, string eventType)
//        {
//            var eventDetail = new CalendarEventDetailDto
//            {
//                Id = eventId,
//                RequirementId = requirement.Id,
//                RequirementNumber = requirement.RequirementNumber,
//                Title = requirement.Title,
//                Description = requirement.Description,
//                Type = eventType,
//                RequirementType = requirement.Type,
//                Priority = requirement.Priority,
//                Status = requirement.Status,
//                Assignee = requirement.AssignedUser?.Name,
//                AssigneeEmail = requirement.AssignedUser?.Email,
//                CreatedAt = requirement.CreatedAt,
//                UpdatedAt = requirement.UpdatedAt,
//                Budget = requirement.Budget,
//                CurrentWorkflowStep = requirement.CurrentWorkflowStep,
//                WorkflowSteps = requirement.WorkflowSteps.Select(ws => new WorkflowStepDto
//                {
//                    Id = ws.Id,
//                    Name = ws.Name,
//                    Status = ws.Status,
//                    Order = ws.Order,
//                    CompletedAt = ws.CompletedAt,
//                    Assignee = ws.Assignee
//                }).ToList(),
//                ExternalReferences = requirement.ExternalReferences.Select(er => new ExternalReferenceDto
//                {
//                    Id = er.Id,
//                    Title = er.Title,
//                    Url = er.Url,
//                    Type = er.Type
//                }).ToList()
//            };

//            // Set the appropriate date based on event type
//            switch (eventType)
//            {
//                case "deadline":
//                    eventDetail.Date = requirement.DueDate?.ToString("yyyy-MM-dd");
//                    eventDetail.IsOverdue = requirement.DueDate < DateTime.Now && requirement.Status != "Completed";
//                    break;
//                case "step":
//                case "milestone":
//                    eventDetail.Date = requirement.CurrentStepDueDate?.ToString("yyyy-MM-dd");
//                    eventDetail.IsOverdue = requirement.CurrentStepDueDate < DateTime.Now && requirement.Status != "Completed";
//                    break;
//                case "release":
//                    eventDetail.Date = requirement.DueDate?.AddDays(1).ToString("yyyy-MM-dd");
//                    eventDetail.IsOverdue = false;
//                    break;
//            }

//            return eventDetail;
//        }

//        #endregion
//    }
//```

//}

//    }
//}
