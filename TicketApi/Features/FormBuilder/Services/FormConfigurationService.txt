using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using TicketApi.Features.FormBuilder.Services;
using TicketApi.Shared.Models.Entities;
using TicketApi.Features.FormBuilder.DTO;
using Newtonsoft.Json.Linq;
using System.Linq;
using static TicketApi.Shared.Infrastructure.Utils.Helpers.VersionHelper;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using TicketApi.Shared.Infrastructure.Utils.Helpers;
using k8s.KubeConfigModels;
using System;
using Humanizer;
using YamlDotNet.Core;
using System.Text.Json;
using JsonException = Newtonsoft.Json.JsonException;
using TicketApi.Features.Authentication.Services;

namespace TicketApi.Features.FormBuilder.Services
{
    // ====================================
    // FORM CONFIGURATION SERVICE IMPLEMENTATION
    // ====================================

    public class FormConfigurationService : IFormConfigurationService
    {
        private readonly RequirementsDbContext _context;
        private readonly ILogger<FormConfigurationService> _logger;
        private readonly IUserService _userService;

        public FormConfigurationService(
            RequirementsDbContext context,
            ILogger<FormConfigurationService> logger,
            IUserService userService
            )
        {
            _context = context;
            _logger = logger;
            _userService = userService;
        }

        // ==================== FORM CONFIGURATION CRUD ====================

        public async Task<FormConfiguration?> GetFormConfigurationAsync(
            string requirementType,
            List<string> userRoles,
            string currentUserId)
        {
            _logger.LogInformation("Getting form configuration for requirement type: {RequirementType}, user: {UserId}",
                requirementType, currentUserId);

            var config = await _context.FormConfigurations
                .Where(fc => fc.RequirementType == requirementType && fc.IsActive == true)
                .OrderByDescending(fc => fc.Version)
                .FirstOrDefaultAsync();

            if (config != null)
            {

                // Apply role-based filtering to configuration data
                config.ConfigurationData = ApplyPermissionFilteringToJson(config.ConfigurationData, userRoles, currentUserId);

                _logger.LogInformation("Found form configuration: {FormId} for requirement type: {RequirementType}",
                    config.Id, requirementType);
            }
            else
            {
                _logger.LogInformation("No form configuration found for requirement type: {RequirementType}", requirementType);
            }

            return config;
        }

        private string ApplyPermissionFilteringToJson(string configurationJson, List<string> userRoles, string currentUserId)
        {
            if (string.IsNullOrEmpty(configurationJson))
            {
                return configurationJson;
            }

            try
            {
                // parse json, filter, back to json
                var configObject = JsonConvert.DeserializeObject<dynamic>(configurationJson);
                // filter based on userroles
                if (configObject == null)
                {
                    return configurationJson;
                }

                // filter based on userroles
                if (configObject["fields"] is JArray fieldsArray)
                {
                    var filteredFields = new JArray();
                    foreach (var field in fieldsArray)
                    {
                        if (HasFieldPermission(field, userRoles, currentUserId))
                        {
                            filteredFields.Add(field);
                        }
                    }
                    configObject["fields"] = filteredFields;
                }
                return JsonConvert.SerializeObject(configObject);
            }
            catch (JsonException ex)
            {
                _logger.LogWarning("Error filtering config JSON: {Error}", ex.Message);
                return configurationJson;
            }
        }

        private bool HasFieldPermission(JToken field, List<string> userRoles, string currentUserId)
        {
            var permissions = field["permissions"];
            if (permissions == null) return true;

            var allowedRoles = permissions["allowedRoles"]?.ToObject<List<string>>();
            if (allowedRoles?.Any() == true && !userRoles.Any(role => allowedRoles.Contains(role)))
            {
                return false;
            }

            return true;
        }

        public async Task<FormConfiguration?> GetFormConfigurationByIdAsync(Guid id, string currentUserId)
        {
            _logger.LogInformation("Getting form configuration by ID: {FormId}, user: {UserId}", id, currentUserId);

            var config = await _context.FormConfigurations
                .Include(fc => fc.Deployments)
                .FirstOrDefaultAsync(fc => fc.Id == id);

            if (config != null)
            {
                _logger.LogInformation("Found form configuration: {FormId}", id);
            }
            else
            {
                _logger.LogWarning("Form configuration not found: {FormId}", id);
            }

            return config;
        }

        public async Task<FormConfiguration> CreateFormConfigurationAsync(CreateFormConfigurationRequest formConfigurationRequest)
        {
            _logger.LogInformation("Creating form configuration: {FormName} for requirement type: {RequirementType}",
                formConfigurationRequest.Name, formConfigurationRequest.RequirementType);

            // Validate configuration data
            var validationResult = await ValidateFormConfigurationAsync(formConfigurationRequest);
            if (!validationResult.IsValid)
            {
                var errorMessage = $"Form configuration is invalid: {string.Join(", ", validationResult.Errors.Select(e => e.Message))}";
                _logger.LogError("Validation failed for form configuration: {ErrorMessage}", errorMessage);
                throw new InvalidOperationException(errorMessage);
            }

            var entity = FormConfigurationMappingExtensions.MapDtoToEntity(formConfigurationRequest,
                await _userService.GetCurrentUserIdAsync());

            _context.FormConfigurations.Add(entity);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Successfully created form configuration: {FormId} for requirement type: {RequirementType}",
                entity.Id, entity.RequirementType);

            return entity;
        }

        public async Task<FormConfiguration> UpdateFormConfigurationAsync(UpdateFormConfigurationRequest formConfiguration)
        {
            _logger.LogInformation("Updating form configuration: {FormId}", formConfiguration.Id);

            var entity = await _context.FormConfigurations.FindAsync(formConfiguration.Id);
            if (entity == null)
            {
                throw new InvalidOperationException("Form config not found");
            }

            // Validate configuration data
            var validationResult = await ValidateFormConfigurationAsync(formConfiguration);
            if (!validationResult.IsValid)
            {
                var errorMessage = $"Form configuration is invalid: {string.Join(", ", validationResult.Errors.Select(e => e.Message))}";
                _logger.LogError("Validation failed for form configuration update: {ErrorMessage}", errorMessage);
                throw new InvalidOperationException(errorMessage);
            }

            // Update modification timestamp
            entity = FormConfigurationMappingExtensions.MapUpdateDtoToEntity(formConfiguration, entity);
            entity.ModifiedAt = DateTime.UtcNow;
            _context.FormConfigurations.Update(entity);

            await _context.SaveChangesAsync();

            _logger.LogInformation("Successfully updated form configuration: {FormId}", formConfiguration.Id);

            return entity;
        }

        public async Task DeleteFormConfigurationAsync(Guid id)
        {
            _logger.LogInformation("Deleting form configuration: {FormId}", id);

            var config = await _context.FormConfigurations.FindAsync(id);
            if (config == null)
            {
                _logger.LogWarning("Form configuration not found for deletion: {FormId}", id);
                throw new InvalidOperationException("Form configuration not found");
            }

            // Check if there are any submissions
            var hasSubmissions = await _context.FormSubmissions.AnyAsync(fs => fs.FormConfigurationId == id);
            if (hasSubmissions)
            {
                _logger.LogWarning("Cannot delete form configuration with existing submissions: {FormId}", id);
                throw new InvalidOperationException("Cannot delete form configuration with existing submissions");
            }

            _context.FormConfigurations.Remove(config);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Successfully deleted form configuration: {FormId}", id);
        }

        public async Task<List<FormConfiguration>> GetAllFormConfigurationsAsync(string? requirementType = null, bool includeInactive = false)
        {
            _logger.LogInformation("Getting all form configurations. RequirementType: {RequirementType}, IncludeInactive: {IncludeInactive}",
                requirementType, includeInactive);

            var query = _context.FormConfigurations.AsQueryable();

            if (!string.IsNullOrEmpty(requirementType))
            {
                query = query.Where(fc => fc.RequirementType == requirementType);
            }

            if (!includeInactive)
            {
                query = query.Where(fc => fc.IsActive == true);
            }

            var configurations = await query
                .OrderBy(fc => fc.RequirementType)
                .ThenBy(fc => fc.Name)
                .ToListAsync();

            _logger.LogInformation("Found {Count} form configurations", configurations.Count);

            return configurations;
        }

        // ==================== DEPLOYMENTS (4-Eyes Principle) ====================

        public async Task<FormDeployment> CreateDeploymentAsync(FormDeployment deployment)
        {
            _logger.LogInformation("Creating deployment for form configuration: {FormId}, version: {Version}",
                deployment.FormConfigurationId, deployment.Version);

            deployment.CreatedAt = DateTime.UtcNow;
            deployment.ReviewStatus = "pending_review";

            _context.FormDeployments.Add(deployment);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Successfully created deployment: {DeploymentId} for form: {FormId}",
                deployment.Id, deployment.FormConfigurationId);

            return deployment;
        }

        public async Task<FormDeployment> UpdateDeploymentAsync(FormDeployment deployment)
        {
            _logger.LogInformation("Updating deployment: {DeploymentId}", deployment.Id);

            _context.FormDeployments.Update(deployment);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Successfully updated deployment: {DeploymentId}", deployment.Id);

            return deployment;
        }

        public async Task<FormDeployment?> GetDeploymentByIdAsync(Guid deploymentId)
        {
            _logger.LogInformation("Getting deployment by ID: {DeploymentId}", deploymentId);

            var deployment = await _context.FormDeployments
                .Include(fd => fd.FormConfiguration)
                .FirstOrDefaultAsync(fd => fd.Id == deploymentId);

            if (deployment != null)
            {
                _logger.LogInformation("Found deployment: {DeploymentId}", deploymentId);
            }
            else
            {
                _logger.LogWarning("Deployment not found: {DeploymentId}", deploymentId);
            }

            return deployment;
        }

        public async Task<List<FormDeployment>> GetDeploymentHistoryAsync(Guid formConfigurationId)
        {
            _logger.LogInformation("Getting deployment history for form configuration: {FormId}", formConfigurationId);

            var deployments = await _context.FormDeployments
                .Where(fd => fd.FormConfigurationId == formConfigurationId)
                .OrderByDescending(fd => fd.CreatedAt)
                .ToListAsync();

            _logger.LogInformation("Found {Count} deployments for form configuration: {FormId}",
                deployments.Count, formConfigurationId);

            return deployments;
        }

        public async Task ExecuteDeploymentAsync(Guid deploymentId)
        {
            _logger.LogInformation("Executing deployment: {DeploymentId}", deploymentId);

            var deployment = await GetDeploymentByIdAsync(deploymentId);
            if (deployment == null)
            {
                _logger.LogError("Deployment not found for execution: {DeploymentId}", deploymentId);
                throw new InvalidOperationException("Deployment not found");
            }

            if (deployment.ReviewStatus != "approved")
            {
                _logger.LogError("Deployment must be approved before execution: {DeploymentId}, current status: {Status}",
                    deploymentId, deployment.ReviewStatus);
                throw new InvalidOperationException("Deployment must be approved before execution");
            }

            try
            {
                // Here you would implement the actual deployment logic
                // For example: sync to production database, update caches, etc.

                _logger.LogInformation("Starting deployment execution: {DeploymentId}", deploymentId);

                // Simulate deployment process
                await Task.Delay(1000);

                // Mark as deployed
                deployment.ReviewStatus = "deployed";
                deployment.DeploymentDate = DateTime.UtcNow;

                await UpdateDeploymentAsync(deployment);

                _logger.LogInformation("Successfully executed deployment: {DeploymentId}", deploymentId);
            }
            catch (Exception ex)
            {
                deployment.ReviewStatus = "failed";
                deployment.ErrorMessage = ex.Message;
                await UpdateDeploymentAsync(deployment);

                _logger.LogError(ex, "Failed to execute deployment: {DeploymentId}", deploymentId);
                throw;
            }
        }

        // ==================== FORM SUBMISSIONS ====================

        public async Task<FormSubmission> CreateSubmissionAsync(FormSubmission submission)
        {
            _logger.LogInformation("Creating form submission for requirement: {RequirementId}, form: {FormId}",
                submission.RequirementId, submission.FormConfigurationId);

            submission.SubmittedAt = DateTime.UtcNow;
            submission.ModifiedAt = DateTime.UtcNow;

            _context.FormSubmissions.Add(submission);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Successfully created form submission: {SubmissionId} for requirement: {RequirementId}",
                submission.Id, submission.RequirementId);

            return submission;
        }

        public async Task<FormSubmission?> GetSubmissionByIdAsync(Guid submissionId, string currentUserId)
        {
            _logger.LogInformation("Getting form submission by ID: {SubmissionId}, user: {UserId}",
                submissionId, currentUserId);

            var submission = await _context.FormSubmissions
                .Include(fs => fs.FormConfiguration)
                .FirstOrDefaultAsync(fs => fs.Id == submissionId);

            if (submission != null)
            {
                _logger.LogInformation("Found form submission: {SubmissionId}", submissionId);
            }
            else
            {
                _logger.LogWarning("Form submission not found: {SubmissionId}", submissionId);
            }

            return submission;
        }

        public async Task<List<FormSubmission>> GetSubmissionsByRequirementAsync(Guid requirementId)
        {
            _logger.LogInformation("Getting form submissions for requirement: {RequirementId}", requirementId);

            var submissions = await _context.FormSubmissions
                .Where(fs => fs.RequirementId == requirementId)
                .OrderByDescending(fs => fs.CreatedAt)
                .ToListAsync();

            _logger.LogInformation("Found {Count} form submissions for requirement: {RequirementId}",
                submissions.Count, requirementId);

            return submissions;
        }

        public async Task<bool> HasSubmissionsAsync(Guid formConfigurationId)
        {
            var hasSubmissions = await _context.FormSubmissions
                .AnyAsync(fs => fs.FormConfigurationId == formConfigurationId);

            _logger.LogInformation("Form configuration {FormId} has submissions: {HasSubmissions}",
                formConfigurationId, hasSubmissions);

            return hasSubmissions;
        }

        // ==================== VALIDATION ====================

        public async Task<ValidationResult> ValidateFormConfigurationAsync(object formData)
        {
            _logger.LogInformation("Validating form configuration");

            var result = new ValidationResult { IsValid = true };
            CreateFormConfigurationRequest config = new CreateFormConfigurationRequest();

            try
            {
                // Parse configuration data
                if (formData is CreateFormConfigurationRequest dto)
                {

                    if (formData is string jsonString)
                    {
                        config = dto;
                    }
                }

                else
                {
                    var json = JsonConvert.SerializeObject(formData);
                    config = JsonConvert.DeserializeObject<CreateFormConfigurationRequest>(json);
                }

                // Validate structure
                if (config?.Fields == null)
                {
                    result.Errors.Add(new ValidationError
                    {
                        Field = "fields",
                        Message = "Form must have at least one field",
                        Code = "MISSING_FIELDS"
                    });
                    result.IsValid = false;
                }

                if (config?.Sections == null)
                {
                    result.Errors.Add(new ValidationError
                    {
                        Field = "sections",
                        Message = "Form must have at least one section",
                        Code = "MISSING_SECTIONS"
                    });
                    result.IsValid = false;
                }

                // Validate field types and names
                if (config?.Fields != null)
                {
                    var fieldNames = new HashSet<string>();
                    foreach (var field in config.Fields)
                    {
                        // Check for duplicate field names
                        var fieldName = field.Name?.ToString();
                        if (!string.IsNullOrEmpty(fieldName))
                        {
                            if (fieldNames.Contains(fieldName))
                            {
                                result.Errors.Add(new ValidationError
                                {
                                    Field = "fields",
                                    Message = $"Duplicate field name: {fieldName}",
                                    Code = "DUPLICATE_FIELD_NAME"
                                });
                                result.IsValid = false;
                            }
                            fieldNames.Add(fieldName);
                        }
                        else
                        {
                            result.Errors.Add(new ValidationError
                            {
                                Field = "fields",
                                Message = "All fields must have a name",
                                Code = "MISSING_FIELD_NAME"
                            });
                            result.IsValid = false;
                        }

                        // Validate field type
                        var fieldType = field.Type?.ToString();
                        var validTypes = new List<string> { "text", "textarea", "number", "email", "phone", "date", "datetime", "select", "multiselect", "radio", "checkbox", "checkboxGroup", "file", "currency", "percentage", "url", "divider", "heading" };
                        if (string.IsNullOrEmpty(fieldType) || !validTypes.Contains(fieldType))
                        {
                            result.Errors.Add(new ValidationError
                            {
                                Field = "fields",
                                Message = $"Invalid field type: {fieldType}",
                                Code = "INVALID_FIELD_TYPE"
                            });
                            result.IsValid = false;
                        }
                    }
                }

                if (result.IsValid)
                {
                    _logger.LogInformation("Form configuration validation passed");
                }
                else
                {
                    _logger.LogWarning("Form configuration validation failed with {ErrorCount} errors", result.Errors.Count);
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during form configuration validation");

                result.Errors.Add(new ValidationError
                {
                    Field = "configuration",
                    Message = $"Invalid configuration format: {ex.Message}",
                    Code = "INVALID_FORMAT"
                });
                result.IsValid = false;
            }

            return result;
        }

        public async Task<ValidationResult> ValidateSubmissionAsync(Guid formConfigurationId, Dictionary<string, object> fieldValues)
        {
            _logger.LogInformation("Validating form submission for form: {FormId}", formConfigurationId);

            var result = new ValidationResult { IsValid = true };

            var formConfig = await GetFormConfigurationByIdAsync(formConfigurationId, await _userService.GetCurrentUserIdAsync());
            if (formConfig == null)
            {
                result.Errors.Add(new ValidationError
                {
                    Field = "form",
                    Message = "Form configuration not found",
                    Code = "FORM_NOT_FOUND"
                });
                result.IsValid = false;
                return result;
            }

            try
            {
                var configData = JsonConvert.DeserializeObject<dynamic>(formConfig.ConfigurationData);
                var fields = JsonConvert.DeserializeObject<List<dynamic>>(configData?.fields?.ToString() ?? "[]");

                // Validate required fields
                foreach (var field in fields)
                {
                    var fieldName = field.name?.ToString();
                    var isRequired = field.required ?? false;
                    var fieldLabel = field.label?.ToString() ?? fieldName;

                    if (isRequired && !string.IsNullOrEmpty(fieldName))
                    {
                        if (!fieldValues.ContainsKey(fieldName) ||
                            fieldValues[fieldName] == null ||
                            string.IsNullOrWhiteSpace(fieldValues[fieldName].ToString()))
                        {
                            result.Errors.Add(new ValidationError
                            {
                                Field = fieldName,
                                Message = $"Field '{fieldLabel}' is required",
                                Code = "REQUIRED_FIELD_MISSING"
                            });
                            result.IsValid = false;
                        }
                    }

                    // Validate field type specific rules
                    if (!string.IsNullOrEmpty(fieldName) && fieldValues.ContainsKey(fieldName))
                    {
                        var fieldType = field.type?.ToString();
                        var fieldValue = fieldValues[fieldName];

                        switch (fieldType)
                        {
                            case "email":
                                if (fieldValue != null && !IsValidEmail(fieldValue.ToString()))
                                {
                                    result.Errors.Add(new ValidationError
                                    {
                                        Field = fieldName,
                                        Message = $"'{fieldLabel}' must be a valid email address",
                                        Code = "INVALID_EMAIL"
                                    });
                                    result.IsValid = false;
                                }
                                break;

                            case "number":
                            case "currency":
                            case "percentage":
                                if (fieldValue != null && !IsNumeric(fieldValue.ToString()))
                                {
                                    result.Errors.Add(new ValidationError
                                    {
                                        Field = fieldName,
                                        Message = $"'{fieldLabel}' must be a valid number",
                                        Code = "INVALID_NUMBER"
                                    });
                                    result.IsValid = false;
                                }
                                break;

                            case "url":
                                if (fieldValue != null && !IsValidUrl(fieldValue.ToString()))
                                {
                                    result.Errors.Add(new ValidationError
                                    {
                                        Field = fieldName,
                                        Message = $"'{fieldLabel}' must be a valid URL",
                                        Code = "INVALID_URL"
                                    });
                                    result.IsValid = false;
                                }
                                break;
                        }
                    }
                }

                if (result.IsValid)
                {
                    _logger.LogInformation("Form submission validation passed for form: {FormId}", formConfigurationId);
                }
                else
                {
                    _logger.LogWarning("Form submission validation failed for form: {FormId} with {ErrorCount} errors",
                        formConfigurationId, result.Errors.Count);
                }

            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error during form submission validation for form: {FormId}", formConfigurationId);

                result.Errors.Add(new ValidationError
                {
                    Field = "submission",
                    Message = $"Validation error: {ex.Message}",
                    Code = "VALIDATION_ERROR"
                });
                result.IsValid = false;
            }

            return result;
        }

        // ==================== ANALYTICS & USAGE ====================

        public async Task<object> GetFormUsageStatsAsync(Guid formConfigurationId, DateTime? startDate = null, DateTime? endDate = null)
        {
            _logger.LogInformation("Getting usage stats for form: {FormId}", formConfigurationId);

            var start = startDate ?? DateTime.UtcNow.AddDays(-30);
            var end = endDate ?? DateTime.UtcNow;

            var submissions = await _context.FormSubmissions
                .Where(fs => fs.FormConfigurationId == formConfigurationId
                    && fs.CreatedAt >= start
                    && fs.CreatedAt <= end)
                .ToListAsync();

            var stats = new
            {
                formConfigurationId = formConfigurationId.ToString(),
                totalSubmissions = submissions.Count,
                uniqueUsers = submissions.Select(s => s.CreatedBy).Distinct().Count(),
                averageCompletionTime = 0, // Would calculate from submission data
                abandonmentRate = 0.0,
                conversionRate = submissions.Count > 0 ? submissions.Count(s => s.Status == "submitted") / (double)submissions.Count * 100 : 0,
                lightModeUsage = submissions.Count > 0 ? submissions.Count(s => s.IsLightMode == true) / (double)submissions.Count * 100 : 0,
                fieldAnalytics = new List<object>(),
                mostUsedFields = new List<string>(),
                leastUsedFields = new List<string>(),
                errorFrequency = new List<object>(),
                usageTrend = new List<object>(),
                deviceBreakdown = new { desktop = 70, mobile = 25, tablet = 5 },
                browserBreakdown = new Dictionary<string, int>()
            };

            _logger.LogInformation("Generated usage stats for form: {FormId} with {SubmissionCount} submissions",
                formConfigurationId, submissions.Count);

            return stats;
        }

        // ==================== TEMPLATES ====================

        public async Task<List<FormTemplateDto>> GetFormTemplatesAsync(string? category = null)
        {
            _logger.LogInformation("Getting all form templates");

            try
            {
                // Try to load from database first
                var templates = await _context.FormTemplates
                    .Where(t => t.IsActive && (category == null || t.Category == category))
                    .OrderBy(t => t.Category)
                    .ThenBy(t => t.Name)
                    .ToListAsync();

                if (!templates.Any())
                {
                    _logger.LogWarning("No form templates found in DB");
                    throw new InvalidOperationException("no form templates available");
                }

                _logger.LogInformation("Found {Count} active form templates", templates.Count);
                return templates.Select(FormConfigurationMappingExtensions.MapTemplateEntityToDto).ToList();
            }
            catch (Exception ex)
            {
                _logger.LogError("Loading template error");
                throw new InvalidOperationException("Failed to load templates from DB", ex);
            }

        }

        /// <summary>
        /// Create form from template using your FormTemplateDto
        /// </summary>
        public async Task<FormConfiguration> CreateFormFromTemplateAsync(
            Guid templateId,
            string name,
            string requirementType,
            Dictionary<string, object>? fieldMappings = null)
        {
            _logger.LogInformation("Creating form from template: {TemplateId}, name: {Name}, type: {RequirementType}",
                templateId, name, requirementType);

            if (templateId == Guid.Empty)
            {
                throw new ArgumentException("Template ID cannot be empty", nameof(templateId));
            }
            if (string.IsNullOrWhiteSpace(name))
            {
                throw new ArgumentException("Form name cannot be empty", nameof(name));
            }
            if (string.IsNullOrWhiteSpace(requirementType))
            {
                throw new ArgumentException("Requirement type cannot be empty", nameof(requirementType));
            }

            // 1. ✅ Load template using your DTO
            var template = await GetTemplateByIdAsync(templateId);
            if (template == null)
            {
                throw new InvalidOperationException($"Template with ID {templateId} not found or inactive.");
            }
            try
            {
                // 2. ✅ Create DTO from template data
                var createRequest = new CreateFormConfigurationRequest
                {
                    Name = name,
                    RequirementType = requirementType,
                    Description = $"Created from template: {template.Name}",
                    Fields = ApplyFieldMappings(template.TemplateData.Fields, fieldMappings),
                    Sections = template.TemplateData.Sections,
                    Permissions = template.TemplateData.Permissions,
                    LightMode = template.TemplateData.LightMode,
                    IsActive = true,
                    HasLightMode = template.TemplateData.HasLightMode,
                    WorkflowStepId = template.TemplateData.WorkflowStepId
                };

                // 3. ✅ Use existing Create method (DTO → Entity)
                var createdConfig = await CreateFormConfigurationAsync(createRequest);

                // 4. ✅ Track template usage
                await IncrementTemplateUsageAsync(templateId);

                _logger.LogInformation("Successfully created form from template: {FormId}", createdConfig.Id);
                return createdConfig;
            }
            catch (Exception ex) when (ex is not InvalidOperationException && ex is not ArgumentException)
            {
                _logger.LogError(ex, "Error creating form from template {TemplateId}", templateId);
                throw new InvalidOperationException($"Failed to create form from template '{template.Name}'.");
            }
        }

        /// <summary>
        /// Apply field mappings to template fields
        /// </summary>
        private List<FormFieldDto> ApplyFieldMappings(
            List<FormFieldDto> templateFields,
            Dictionary<string, object>? fieldMappings)
        {
            if (fieldMappings == null || !fieldMappings.Any())
            {
                return new List<FormFieldDto>(templateFields);
            }

            var mappedFields = new List<FormFieldDto>();

            foreach (var field in templateFields)
            {
                var mappedField = new FormFieldDto
                {
                    Id = field.Id,
                    Type = field.Type,
                    Name = field.Name,
                    Label = field.Label,
                    Placeholder = field.Placeholder,
                    Required = field.Required,
                    Width = field.Width,
                    Section = field.Section,
                    Order = field.Order,
                    Options = field.Options != null ? new List<FieldOptionDto>(field.Options) : null,
                    DefaultValue = field.DefaultValue
                };

                // Apply field mappings
                if (fieldMappings.TryGetValue(field.Name, out var mapping))
                {
                    if (mapping is string newLabel)
                    {
                        // Simple label change
                        mappedField.Label = newLabel;
                    }
                    else if (mapping is Dictionary<string, object> complexMapping)
                    {
                        // Complex mapping
                        if (complexMapping.TryGetValue("label", out var labelObj) && labelObj is string label)
                        {
                            mappedField.Label = label;
                        }
                        if (complexMapping.TryGetValue("required", out var requiredObj) && requiredObj is bool required)
                        {
                            mappedField.Required = required;
                        }
                        if (complexMapping.TryGetValue("placeholder", out var placeholderObj) && placeholderObj is string placeholder)
                        {
                            mappedField.Placeholder = placeholder;
                        }
                    }
                }

                mappedFields.Add(mappedField);
            }

            return mappedFields;
        }

        /// <summary>
        /// Increment template usage count
        /// </summary>
        private async Task IncrementTemplateUsageAsync(Guid templateId)
        {
            try
            {
                var template = await _context.FormTemplates
                    .Where(t => t.Id == templateId)
                    .FirstOrDefaultAsync();

                if (template != null)
                {
                    template.UsageCount++;
                    template.LastUsedAt = DateTime.UtcNow;
                    await _context.SaveChangesAsync();
                }
            }
            catch (Exception ex)
            {
                _logger.LogWarning(ex, "Could not increment usage count for template {TemplateId}", templateId);
                // Don't throw - this is not critical
            }
        }

        public async Task<FormTemplateDto?> GetTemplateByIdAsync(Guid templateId)
        {
            _logger.LogInformation("Getting template by ID: {TemplateId}", templateId);
            if (templateId == Guid.Empty)
            {
                throw new ArgumentException("Template ID cannot be empty", nameof(templateId));
            }

            try
            {
                // Try database first
                var template = await _context.FormTemplates
                    .Where(t => t.Id == templateId && t.IsActive)
                    .FirstOrDefaultAsync();

                if (template == null)
                {
                    _logger.LogWarning("Template {TemplateId} not found or inactive", templateId);
                    return null;
                }
                _logger.LogInformation("Successfully loaded template: {TemplateName}", template.Name);
                return FormConfigurationMappingExtensions.MapTemplateEntityToDto(template);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error loading template {TemplateId}", templateId);
                throw new InvalidOperationException($"Failed to load template {templateId}.", ex);
            }
        }

        // ==================== PERMISSIONS ====================

        public async Task<object> GetFormPermissionsAsync(Guid formConfigurationId, string currentUserId)
        {
            _logger.LogInformation("Getting form permissions for form: {FormId}, user: {UserId}",
                formConfigurationId, currentUserId);

            var userId = await _userService.GetCurrentUserIdAsync();
            var userRoles = await _userService.GetUserRolesAsync();

            // This would typically check against the form's permission configuration
            // and the user's roles to determine what they can do
            var permissions = new
            {
                canView = true,
                canEdit = userRoles.Contains("Administrator") || userRoles.Contains("Manager"),
                canDeploy = userRoles.Contains("Administrator") || userRoles.Contains("Approver"),
                canDelete = userRoles.Contains("Administrator"),
                restrictedFields = new List<string>()
            };

            _logger.LogInformation("Generated permissions for form: {FormId}, user: {UserId}. CanEdit: {CanEdit}, CanDeploy: {CanDeploy}",
                formConfigurationId, currentUserId, permissions.canEdit, permissions.canDeploy);

            return permissions;
        }

        // ==================== IMPORT/EXPORT ====================

        public async Task<byte[]> ExportFormConfigurationAsync(Guid formConfigurationId, string format)
        {
            _logger.LogInformation("Exporting form configuration: {FormId} in format: {Format}",
                formConfigurationId, format);

            var config = await GetFormConfigurationByIdAsync(formConfigurationId, await _userService.GetCurrentUserIdAsync());
            if (config == null)
            {
                _logger.LogError("Form configuration not found for export: {FormId}", formConfigurationId);
                throw new InvalidOperationException("Form configuration not found");
            }

            if (format.ToLower() == "json")
            {
                var jsonString = JsonConvert.SerializeObject(config, Formatting.Indented);
                var bytes = System.Text.Encoding.UTF8.GetBytes(jsonString);

                _logger.LogInformation("Successfully exported form configuration: {FormId} as JSON ({ByteCount} bytes)",
                    formConfigurationId, bytes.Length);

                return bytes;
            }
            else if (format.ToLower() == "excel")
            {
                // Would implement Excel export here
                _logger.LogError("Excel export not yet implemented for form: {FormId}", formConfigurationId);
                throw new NotImplementedException("Excel export not yet implemented");
            }

            _logger.LogError("Unsupported export format: {Format} for form: {FormId}", format, formConfigurationId);
            throw new ArgumentException($"Unsupported export format: {format}");
        }

        public async Task<object> ImportFormConfigurationAsync(Stream fileStream, bool overwriteExisting, bool validateOnly)
        {
            //_logger.LogInformation("Importing form configurations. OverwriteExisting: {OverwriteExisting}, ValidateOnly: {ValidateOnly}",
            //    overwriteExisting, validateOnly);

            //var importedForms = new List<FormConfiguration>();
            //var errors = new List<string>();

            //try
            //{
            //    using var reader = new StreamReader(fileStream);
            //    var content = await reader.ReadToEndAsync();

            //    var importedData = JsonConvert.DeserializeObject<FormConfiguration[]>(content);

            //    if (importedData == null)
            //    {
            //        errors.Add("Invalid file format");
            //        _logger.LogWarning("Import failed: Invalid file format");
            //        return new { isSuccess = false, importedForms, errors };
            //    }

            //    foreach (var config in importedData)
            //    {
            //        try
            //        {
            //            // Validate configuration
            //            var validationResult = await ValidateFormConfigurationAsync(config.ConfigurationData);
            //            if (!validationResult.IsValid)
            //            {
            //                var errorMessage = $"Validation failed for '{config.Name}': {string.Join(", ", validationResult.Errors.Select(e => e.Message))}";
            //                errors.Add(errorMessage);
            //                _logger.LogWarning("Import validation failed for form: {FormName}. Errors: {Errors}",
            //                    config.Name, errorMessage);
            //                continue;
            //            }

            //            if (!validateOnly)
            //            {
            //                // Check if exists
            //                var existing = await _context.FormConfigurations
            //                    .FirstOrDefaultAsync(fc => fc.RequirementType == config.RequirementType && fc.Name == config.Name);

            //                if (existing != null && !overwriteExisting)
            //                {
            //                    var errorMessage = $"Form '{config.Name}' already exists for requirement type '{config.RequirementType}'";
            //                    errors.Add(errorMessage);
            //                    _logger.LogWarning("Import skipped existing form: {FormName}, RequirementType: {RequirementType}",
            //                        config.Name, config.RequirementType);
            //                    continue;
            //                }

            //                // Create or update
            //                config.Id = Guid.NewGuid();
            //                config.CreatedAt = DateTime.UtcNow;
            //                config.ModifiedAt = DateTime.UtcNow;
            //                config.CreatedBy = await _userService.GetCurrentUserIdAsync();

            //                if (existing != null)
            //                {
            //                    // Update existing
            //                    existing.ConfigurationData = config.ConfigurationData;
            //                    existing.ModifiedAt = DateTime.UtcNow;
            //                    IncrementVersion(existing.Version);
            //                    importedForms.Add(existing);

            //                    _logger.LogInformation("Updated existing form during import: {FormName}", config.Name);
            //                }
            //                else
            //                {
            //                    // Create new
            //                    var created = await CreateFormConfigurationAsync(importedData);
            //                    importedForms.Add(created);

            //                    _logger.LogInformation("Created new form during import: {FormName}", config.Name);
            //                }
            //            }
            //            else
            //            {
            //                importedForms.Add(config);
            //            }
            //        }
            //        catch (Exception ex)
            //        {
            //            var errorMessage = $"Error processing '{config.Name}': {ex.Message}";
            //            errors.Add(errorMessage);
            //            _logger.LogError(ex, "Error processing form during import: {FormName}", config.Name);
            //        }
            //    }

            //    var result = new
            //    {
            //        isSuccess = errors.Count == 0,
            //        importedForms,
            //        errors
            //    };

            //    _logger.LogInformation("Import completed. Success: {IsSuccess}, Imported: {ImportedCount}, Errors: {ErrorCount}",
            //        result.isSuccess, importedForms.Count, errors.Count);

            //    return result;
            //}
            //catch (Exception ex)
            //{
            //    var errorMessage = $"Import failed: {ex.Message}";
            //    errors.Add(errorMessage);
            //    _logger.LogError(ex, "Import operation failed");
            //    return new { isSuccess = false, importedForms, errors };
            //}
            return null;
        }

        // ==================== HELPER METHODS ====================

        //        private async Task<List<FormConfiguration>> ApplyPermissionFiltering(
        //List<FormConfiguration> configurations,
        //List<string> userRoles,
        //string currentUser)
        //        {
        //            var filteredConfigurations = new List<FormConfiguration>();

        //            foreach (var config in configurations)
        //            {
        //                try
        //                {
        //                    // Parse ConfigurationData für Permission-Checks
        //                    if (!string.IsNullOrEmpty(config.ConfigurationData))
        //                    {
        //                        // Nutze dein FormPermissions DTO
        //                        var permissions = JsonSerializer.Deserialize<FormPermissionsDto>(config.ConfigurationData);

        //                        if (permissions != null)
        //                        {
        //                            // Prüfe Permissions mit deinem DTO
        //                            if (HasFormPermission(permissions, userRoles, currentUser))
        //                            {
        //                                filteredConfigurations.Add(config);
        //                            }
        //                        }
        //                        else
        //                        {
        //                            // Keine Permissions = erlaubt
        //                            filteredConfigurations.Add(config);
        //                        }
        //                    }
        //                    else
        //                    {
        //                        // Keine ConfigurationData = erlaubt
        //                        filteredConfigurations.Add(config);
        //                    }
        //                }
        //                catch (JsonException ex)
        //                {
        //                    _logger.LogWarning("Invalid JSON in ConfigurationData for FormConfiguration {Id}: {Error}",
        //                        config.Id, ex.Message);

        //                    // Bei JSON-Fehlern: Form einschließen (Fail-Safe)
        //                    filteredConfigurations.Add(config);
        //                }
        //            }

        //            return filteredConfigurations;
        //}
        public async Task<FormConfiguration> CreateNewVersionAsync(Guid configId, VersionType versionType = VersionType.Patch)
        {
            var existingConfig = await _context.FormConfigurations.FirstOrDefaultAsync(f => f.Id == configId);

            if (existingConfig == null)
            {
                throw new ArgumentException("Form configuration not found");
            }

            var newConfig = new FormConfiguration
            {
                Id = Guid.NewGuid(),
                RequirementType = existingConfig.RequirementType,
                Name = existingConfig.Name,
                Description = existingConfig.Description,
                ConfigurationData = existingConfig.ConfigurationData,
                Version = VersionHelper.IncrementVersion(existingConfig.Version, versionType),
                IsActive = false,
                HasLightMode = existingConfig.HasLightMode,
                CreatedBy = "", // TODO
                CreatedAt = DateTime.UtcNow,
                ModifiedAt = DateTime.UtcNow,

            };
            await _context.FormConfigurations.AddAsync(newConfig);
            await _context.SaveChangesAsync();

            return newConfig;
        }

        public async Task<List<FormConfiguration>> GetFormVersionsAsync(Guid configId)
        {
            _logger.LogInformation("Getting all versions for form configuration { ConfigId}", configId);


            // Erst die Basis-Konfiguration finden
            var baseConfig = await _context.FormConfigurations
                .FirstOrDefaultAsync(f => f.Id == configId);

            if (baseConfig == null)
            {
                _logger.LogWarning("Form configuration {ConfigId} not found", configId);
                throw new ArgumentException("Form configuration not found", nameof(configId));
            }

            // Alle Versionen mit gleichem RequirementType finden
            var allVersions = await _context.FormConfigurations
                .Where(f => f.RequirementType == baseConfig.RequirementType)
                .OrderByDescending(f => f.CreatedAt) // Neueste zuerst
                .ToListAsync();

            _logger.LogInformation("Found {Count} versions for requirement type {RequirementType}",
                allVersions.Count, baseConfig.RequirementType);

            return allVersions;


        }

        public async Task ActivateVersionAsync(Guid configId)
        {

            _logger.LogInformation("Activating form configuration version { ConfigId }", configId);


            var configToActivate = await _context.FormConfigurations
                .FirstOrDefaultAsync(f => f.Id == configId);

            if (configToActivate == null)
            {
                _logger.LogWarning("Form configuration {ConfigId} not found", configId);
                throw new ArgumentException("Form configuration not found", nameof(configId));
            }

            try
            {
                // Alle anderen Versionen dieses RequirementTypes deaktivieren
                var otherVersions = await _context.FormConfigurations
                    .Where(f => f.RequirementType == configToActivate.RequirementType && f.Id != configId)
                    .ToListAsync();

                foreach (var version in otherVersions)
                {
                    version.IsActive = false;
                    version.ModifiedAt = DateTime.UtcNow;
                }

                // Die gewählte Version aktivieren
                configToActivate.IsActive = true;
                configToActivate.ModifiedAt = DateTime.UtcNow;

                await _context.SaveChangesAsync();

                _logger.LogInformation("Successfully activated version {Version} for requirement type {RequirementType}",
                    configToActivate.Version, configToActivate.RequirementType);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error activating form configuration version {ConfigId}", configId);
                throw;
            }

        }
        public async Task<FormConfiguration?> GetActiveVersionAsync(string requirementType)
        {
            _logger.LogInformation("Getting active version for requirement type { RequirementType}", requirementType);


            var activeConfig = await _context.FormConfigurations
                .Where(f => f.RequirementType == requirementType && f.IsActive == true)
                .OrderByDescending(f => f.CreatedAt)
                .FirstOrDefaultAsync();

            if (activeConfig != null)
            {
                _logger.LogInformation("Found active version {Version} for requirement type {RequirementType}",
                    activeConfig.Version, requirementType);
            }
            else
            {
                _logger.LogInformation("No active version found for requirement type {RequirementType}", requirementType);
            }

            return activeConfig;


        }

        //        public async Task<FormVersionComparison> CompareVersionsAsync(Guid fromVersionId, Guid toVersionId)
        //        {
        //            _logger.LogInformation("Comparing form versions { FromId} to { ToId}", fromVersionId, toVersionId);


        //            var fromVersion = await _context.FormConfigurations.FindAsync(fromVersionId);
        //            var toVersion = await _context.FormConfigurations.FindAsync(toVersionId);

        //            if (fromVersion == null || toVersion == null)
        //            {
        //                throw new ArgumentException("One or both versions not found");
        //            }

        //            // Hier würdest du die JSON-ConfigurationData vergleichen
        //            var comparison = new FormVersionComparison
        //            {
        //                FromVersion = fromVersion.Version,
        //                ToVersion = toVersion.Version,
        //                Changes = CompareConfigurationData(fromVersion.ConfigurationData, toVersion.ConfigurationData)
        //            };

        //            return comparison;


        //        }

        //        private List<FormChange> CompareConfigurationData(string fromJson, string toJson)
        //        {
        //            var changes = new List<FormChange>();
        //try
        //            {
        //                // Hier würdest du die JSON-Objekte vergleichen
        //                // Das ist eine komplexere Logik - vereinfacht dargestellt

        //                using var fromDoc = JsonDocument.Parse(fromJson);
        //                using var toDoc = JsonDocument.Parse(toJson);

        //                // Beispiel: Fields vergleichen
        //                if (fromDoc.RootElement.TryGetProperty("fields", out var fromFields) &&
        //                    toDoc.RootElement.TryGetProperty("fields", out var toFields))
        //                {
        //                    // Vereinfachter Vergleich - du würdest das detaillierter machen
        //                    if (fromFields.GetArrayLength() != toFields.GetArrayLength())
        //                    {
        //                        changes.Add(new FormChange
        //                        {
        //                            Type = "FieldCount",
        //                            Description = $"Anzahl Felder geändert: {fromFields.GetArrayLength()} → {toFields.GetArrayLength()}"
        //                        });
        //                    }
        //                }
        //            }
        //            catch (Exception ex)
        //            {
        //                _logger.LogWarning(ex, "Error comparing configuration data");
        //                changes.Add(new FormChange
        //                {
        //                    Type = "Error",
        //                    Description = "Fehler beim Vergleichen der Konfigurationen"
        //                });
        //            }

        //            return changes;
        //```

        //}


        private bool HasFormPermission(FormPermissionsDto permissions, List<string> userRoles, string currentUser)
        {
            // Denied Roles prüfen (höchste Priorität)
            if (permissions.DenyRoles?.Any() == true &&
                userRoles.Any(role => permissions.DenyRoles.Contains(role)))
                return false;

            // Allowed Roles prüfen
            if (permissions.AllowedRoles?.Any() == true &&
                !userRoles.Any(role => permissions.AllowedRoles.Contains(role)))
                return false;

            // Allowed Users prüfen
            if (permissions.AllowedUsers?.Any() == true &&
                !permissions.AllowedUsers.Contains(currentUser))
                return false;

            return true;
        }

        private static bool IsValidEmail(string? email)
        {
            if (string.IsNullOrWhiteSpace(email))
                return false;

            try
            {
                var addr = new System.Net.Mail.MailAddress(email);
                return addr.Address == email;
            }
            catch
            {
                return false;
            }
        }

        private static bool IsNumeric(string? value)
        {
            return double.TryParse(value, out _);
        }

        private static bool IsValidUrl(string? url)
        {
            return Uri.TryCreate(url, UriKind.Absolute, out _);
        }
    }
}