using System.ComponentModel.DataAnnotations;
using TicketApi.Features.FormBuilder.DTO;
using TicketApi.Shared.Models.Entities;
using static TicketApi.Shared.Infrastructure.Utils.Helpers.VersionHelper;


namespace TicketApi.Features.FormBuilder.Services
{
    // ====================================
    // FORM CONFIGURATION SERVICE INTERFACE
    // ====================================

    public interface IFormConfigurationService
    {
        // ==================== FORM CONFIGURATION CRUD ====================

        /// <summary>
        /// Gets the active form configuration for a specific requirement type with role-based filtering
        /// </summary>
        /// <param name="requirementType">The type of requirement (e.g., "Kleinanforderung")</param>
        /// <param name="userRoles">List of user roles for permission filtering</param>
        /// <param name="currentUserId">Current user ID for audit purposes</param>
        /// <returns>Form configuration with filtered fields based on user permissions, or null if not found</returns>
        Task<FormConfiguration?> GetFormConfigurationAsync(string requirementType, List<string> userRoles, string currentUserId);

        /// <summary>
        /// Gets a form configuration by its unique identifier
        /// </summary>
        /// <param name="id">Form configuration ID</param>
        /// <param name="currentUserId">Current user ID for audit purposes</param>
        /// <returns>Form configuration including deployment history, or null if not found</returns>
        Task<FormConfiguration?> GetFormConfigurationByIdAsync(Guid id, string currentUserId);

        /// <summary>
        /// Creates a new form configuration with validation
        /// </summary>
        /// <param name="formConfiguration">Form configuration to create</param>
        /// <returns>Created form configuration with generated ID and timestamps</returns>
        /// <exception cref="InvalidOperationException">Thrown when validation fails</exception>
        Task<FormConfiguration> CreateFormConfigurationAsync(CreateFormConfigurationRequest formConfiguration);

        /// <summary>
        /// Updates an existing form configuration with validation
        /// </summary>
        /// <param name="formConfiguration">Form configuration to update</param>
        /// <returns>Updated form configuration</returns>
        /// <exception cref="InvalidOperationException">Thrown when validation fails</exception>
        Task<FormConfiguration> UpdateFormConfigurationAsync(UpdateFormConfigurationRequest formConfiguration);

        /// <summary>
        /// Deletes a form configuration if no submissions exist
        /// </summary>
        /// <param name="id">Form configuration ID to delete</param>
        /// <exception cref="InvalidOperationException">Thrown when form has submissions or doesn't exist</exception>
        Task DeleteFormConfigurationAsync(Guid id);

        /// <summary>
        /// Gets all form configurations with optional filtering
        /// </summary>
        /// <param name="requirementType">Optional requirement type filter</param>
        /// <param name="includeInactive">Whether to include inactive configurations</param>
        /// <returns>List of form configurations ordered by requirement type and name</returns>
        Task<List<FormConfiguration>> GetAllFormConfigurationsAsync(string? requirementType = null, bool includeInactive = false);
        Task<FormConfiguration?> GetActiveVersionAsync(string requirementType);
        Task ActivateVersionAsync(Guid configId);
        Task<List<FormConfiguration>> GetFormVersionsAsync(Guid configId);
        Task<FormConfiguration> CreateNewVersionAsync(Guid configId, VersionType versionType = VersionType.Patch);

        // ==================== DEPLOYMENTS (4-Eyes Principle) ====================

        /// <summary>
        /// Creates a new deployment request for 4-eyes approval process
        /// </summary>
        /// <param name="deployment">Deployment configuration</param>
        /// <returns>Created deployment with pending_review status</returns>
        Task<FormDeployment> CreateDeploymentAsync(FormDeployment deployment);

        /// <summary>
        /// Updates a deployment (typically for review/approval status changes)
        /// </summary>
        /// <param name="deployment">Deployment to update</param>
        /// <returns>Updated deployment</returns>
        Task<FormDeployment> UpdateDeploymentAsync(FormDeployment deployment);

        /// <summary>
        /// Gets a deployment by ID including form configuration details
        /// </summary>
        /// <param name="deploymentId">Deployment ID</param>
        /// <returns>Deployment with form configuration, or null if not found</returns>
        Task<FormDeployment?> GetDeploymentByIdAsync(Guid deploymentId);

        /// <summary>
        /// Gets deployment history for a form configuration
        /// </summary>
        /// <param name="formConfigurationId">Form configuration ID</param>
        /// <returns>List of deployments ordered by creation date (newest first)</returns>
        Task<List<FormDeployment>> GetDeploymentHistoryAsync(Guid formConfigurationId);

        /// <summary>
        /// Executes an approved deployment to production
        /// </summary>
        /// <param name="deploymentId">Deployment ID to execute</param>
        /// <exception cref="InvalidOperationException">Thrown when deployment is not approved or doesn't exist</exception>
        Task ExecuteDeploymentAsync(Guid deploymentId);

        // ==================== FORM SUBMISSIONS ====================

        /// <summary>
        /// Creates a new form submission with validation
        /// </summary>
        /// <param name="submission">Form submission to create</param>
        /// <returns>Created form submission with generated ID and timestamps</returns>
        Task<FormSubmission> CreateSubmissionAsync(FormSubmission submission);

        /// <summary>
        /// Gets a form submission by ID
        /// </summary>
        /// <param name="submissionId">Submission ID</param>
        /// <param name="currentUserId">Current user ID for audit purposes</param>
        /// <returns>Form submission with form configuration, or null if not found</returns>
        Task<FormSubmission?> GetSubmissionByIdAsync(Guid submissionId, string currentUserId);

        /// <summary>
        /// Gets all form submissions for a specific requirement
        /// </summary>
        /// <param name="requirementId">Requirement ID</param>
        /// <returns>List of submissions ordered by creation date (newest first)</returns>
        Task<List<FormSubmission>> GetSubmissionsByRequirementAsync(Guid requirementId);

        /// <summary>
        /// Checks if a form configuration has any submissions (used before deletion)
        /// </summary>
        /// <param name="formConfigurationId">Form configuration ID</param>
        /// <returns>True if form has submissions, false otherwise</returns>
        Task<bool> HasSubmissionsAsync(Guid formConfigurationId);

        // ==================== VALIDATION ====================

        /// <summary>
        /// Validates a form configuration structure and rules
        /// </summary>
        /// <param name="formData">Form configuration data (JSON string or object)</param>
        /// <returns>Validation result with errors, warnings, and suggestions</returns>
        Task<Shared.Models.Entities.ValidationResult> ValidateFormConfigurationAsync(object formData);

        /// <summary>
        /// Validates form submission data against form configuration rules
        /// </summary>
        /// <param name="formConfigurationId">Form configuration ID</param>
        /// <param name="fieldValues">Dictionary of field names and values</param>
        /// <returns>Validation result with field-specific errors</returns>
        Task<Shared.Models.Entities.ValidationResult> ValidateSubmissionAsync(Guid formConfigurationId, Dictionary<string, object> fieldValues);

        // ==================== ANALYTICS & USAGE ====================

        /// <summary>
        /// Gets usage statistics and analytics for a form configuration
        /// </summary>
        /// <param name="formConfigurationId">Form configuration ID</param>
        /// <param name="startDate">Optional start date for stats period</param>
        /// <param name="endDate">Optional end date for stats period</param>
        /// <returns>Analytics object with usage metrics, trends, and performance data</returns>
        Task<object> GetFormUsageStatsAsync(Guid formConfigurationId, DateTime? startDate = null, DateTime? endDate = null);

        // ==================== TEMPLATES ====================

        /// <summary>
        /// Gets available form templates with optional category filtering
        /// </summary>
        /// <param name="category">Optional category filter (e.g., "standard", "advanced")</param>
        /// <returns>List of available form templates</returns>
        Task<List<FormTemplateDto>> GetFormTemplatesAsync(string? category = null);

        /// <summary>
        /// Creates a new form configuration based on a template
        /// </summary>
        /// <param name="templateId">Template ID</param>
        /// <param name="name">Name for the new form</param>
        /// <param name="requirementType">Requirement type for the new form</param>
        /// <param name="fieldMappings">Optional field mappings for customization</param>
        /// <returns>Created form configuration</returns>
        Task<FormConfiguration> CreateFormFromTemplateAsync(Guid templateId, string name, string requirementType, Dictionary<string, object>? fieldMappings = null);

        // ==================== PERMISSIONS ====================

        /// <summary>
        /// Gets current user's permissions for a specific form configuration
        /// </summary>
        /// <param name="formConfigurationId">Form configuration ID</param>
        /// <param name="currentUserId">Current user ID</param>
        /// <returns>Permissions object indicating what actions the user can perform</returns>
        Task<object> GetFormPermissionsAsync(Guid formConfigurationId, string currentUserId);

        // ==================== IMPORT/EXPORT ====================

        /// <summary>
        /// Exports a form configuration to specified format
        /// </summary>
        /// <param name="formConfigurationId">Form configuration ID</param>
        /// <param name="format">Export format ("json" or "excel")</param>
        /// <returns>Exported data as byte array</returns>
        /// <exception cref="InvalidOperationException">Thrown when form doesn't exist</exception>
        /// <exception cref="ArgumentException">Thrown when format is not supported</exception>
        /// <exception cref="NotImplementedException">Thrown when Excel export is requested (not yet implemented)</exception>
        Task<byte[]> ExportFormConfigurationAsync(Guid formConfigurationId, string format);

        /// <summary>
        /// Imports form configurations from a file stream
        /// </summary>
        /// <param name="fileStream">File stream containing form configurations</param>
        /// <param name="overwriteExisting">Whether to overwrite existing forms with same name/type</param>
        /// <param name="validateOnly">Whether to only validate without saving</param>
        /// <returns>Import result with success status, imported forms, and any errors</returns>
        Task<object> ImportFormConfigurationAsync(Stream fileStream, bool overwriteExisting, bool validateOnly);
    }


    // ====================================
    // WORKFLOW SERVICE INTERFACE (for form integration)
    // ====================================

    //public interface IWorkflowService
    //{
    //    /// <summary>
    //    /// Gets available workflow steps for a specific requirement type
    //    /// </summary>
    //    /// <param name="requirementType">Requirement type (e.g., "Kleinanforderung")</param>
    //    /// <returns>List of workflow steps that can be bound to form fields</returns>
    //    Task<List<WorkflowStepInstance?>> GetWorkflowStepsAsync(string requirementType);

    //    /// <summary>
    //    /// Gets a specific workflow step by ID
    //    /// </summary>
    //    /// <param name="stepId">Workflow step ID</param>
    //    /// <returns>Workflow step or null if not found</returns>
    //    Task<WorkflowStepInstance?> GetWorkflowStepByIdAsync(string stepId);

    //    /// <summary>
    //    /// Validates if a workflow step exists and is active
    //    /// </summary>
    //    /// <param name="stepId">Workflow step ID</param>
    //    /// <param name="requirementType">Requirement type</param>
    //    /// <returns>True if step exists and is valid for the requirement type</returns>
    //    Task<bool> IsValidWorkflowStepAsync(string stepId, string requirementType);
    //}

    // ====================================
    // AUDIT SERVICE INTERFACE (optional)
    // ====================================

    public interface IAuditService
    {
        /// <summary>
        /// Logs an audit event for form configuration changes
        /// </summary>
        /// <param name="entityType">Type of entity (e.g., "FormConfiguration")</param>
        /// <param name="entityId">Entity ID</param>
        /// <param name="action">Action performed</param>
        /// <param name="oldValues">Previous values (optional)</param>
        /// <param name="newValues">New values (optional)</param>
        /// <param name="userId">User who performed the action</param>
        Task LogAuditEventAsync(string entityType, string entityId, string action, object? oldValues = null, object? newValues = null, string? userId = null);

        /// <summary>
        /// Gets audit history for a specific entity
        /// </summary>
        /// <param name="entityType">Type of entity</param>
        /// <param name="entityId">Entity ID</param>
        /// <param name="limit">Maximum number of entries to return</param>
        /// <returns>List of audit log entries</returns>
        Task<List<object>> GetAuditHistoryAsync(string entityType, string entityId, int limit = 50);
    }

    // ====================================
    // NOTIFICATION SERVICE INTERFACE (optional)
    // ====================================

    public interface INotificationService
    {
        /// <summary>
        /// Sends notification about form deployment status change
        /// </summary>
        /// <param name="deploymentId">Deployment ID</param>
        /// <param name="status">New deployment status</param>
        /// <param name="recipients">List of user IDs or roles to notify</param>
        Task SendDeploymentNotificationAsync(Guid deploymentId, string status, List<string> recipients);

        /// <summary>
        /// Sends notification about form submission
        /// </summary>
        /// <param name="submissionId">Submission ID</param>
        /// <param name="formName">Form name</param>
        /// <param name="recipients">List of user IDs or roles to notify</param>
        Task SendSubmissionNotificationAsync(Guid submissionId, string formName, List<string> recipients);

        /// <summary>
        /// Sends notification about validation errors
        /// </summary>
        /// <param name="formConfigurationId">Form configuration ID</param>
        /// <param name="errors">List of validation errors</param>
        /// <param name="userId">User ID to notify</param>
        Task SendValidationErrorNotificationAsync(Guid formConfigurationId, List<string> errors, string userId);
        Task<FormConfiguration> CreateNewVersionAsync(Guid configId, VersionType versionType = VersionType.Patch);
    }
}