namespace TicketApi.Shared.Infrastructure.Utils.Helpers
{
    public static class VersionHelper
    {
        public static string IncrementVersion(string version, VersionType versionType = VersionType.Patch)
        {
            // null / empty handling
            if (string.IsNullOrEmpty(version))
            {
                return "v.1.0.0";
            }

            try
            {
                // remove prefix
                string cleanVersion = version.StartsWith("v") ?
                    version.Substring(1) :
                    version;

                var parts = cleanVersion.Split('.');
                int major = 0, minor = 0, patch = 0;

                if (parts.Length >= 1 && int.TryParse(parts[0], out major)) { }
                if (parts.Length >= 2 && int.TryParse(parts[1], out minor)) { }
                if (parts.Length >= 3 && int.TryParse(parts[2], out patch)) { }

                switch (versionType)
                {
                    case VersionType.Major:
                        major++;
                        minor = 0;
                        patch = 0;
                        break;
                    case VersionType.Minor:
                        minor++;
                        patch = 0;
                        break;
                    case VersionType.Patch:
                        patch++;
                        break;
                }
                return $"v{major}.{minor}.{patch}";
            }
            catch
            {
                return GenerateNextSimpleVersion(version);
            }
        }
        private static (int Major, int Minor, int Patch) ParseVersion(string version)
        {
            // Remove 'v' prefix
            string cleanVersion = version.StartsWith("v")
                ? version.Substring(1)
                : version;

            var parts = cleanVersion.Split('.');

            int major = 0, minor = 0, patch = 0;

            if (parts.Length >= 1) int.TryParse(parts[0], out major);
            if (parts.Length >= 2) int.TryParse(parts[1], out minor);
            if (parts.Length >= 3) int.TryParse(parts[2], out patch);

            return (major, minor, patch);
        }


        private static string GenerateNextSimpleVersion(string currentVersion)
        {
            if (currentVersion.Contains("."))
            {
                var lastDot = currentVersion.LastIndexOf('.');
                var prefix = currentVersion.Substring(0, lastDot + 1);
                var lastPart = currentVersion.Substring(lastDot + 1);
                if (int.TryParse(lastPart, out int lastNumber))
                {
                    return prefix + (lastNumber + 1);
                }
            }
            return "v.1.0.1";
        }

        public static int CompareVersions(string version1, string version2)
        {
            if (string.IsNullOrEmpty(version1) && string.IsNullOrEmpty(version2))
                return 0;

            if (string.IsNullOrEmpty(version1))
                return -1;

            if (string.IsNullOrEmpty(version2))
                return 1;

            try
            {
                var v1Parts = ParseVersion(version1);
                var v2Parts = ParseVersion(version2);

                // Compare major
                if (v1Parts.Major != v2Parts.Major)
                    return v1Parts.Major.CompareTo(v2Parts.Major);

                // Compare minor
                if (v1Parts.Minor != v2Parts.Minor)
                    return v1Parts.Minor.CompareTo(v2Parts.Minor);

                // Compare patch
                return v1Parts.Patch.CompareTo(v2Parts.Patch);
            }
            catch
            {
                // Fallback: String comparison
                return string.Compare(version1, version2, StringComparison.OrdinalIgnoreCase);
            }
        }
        public static bool IsValidVersion(string version)
        {
            if (string.IsNullOrEmpty(version))
                return false;

            try
            {
                ParseVersion(version);
                return true;
            }
            catch
            {
                return false;
            }
        }

        public static string CreateInitialVersion()
        {
            return "v1.0.0";
        }






        public enum VersionType
        {
            Major,
            Minor,
            Patch
        }
    }
}