using System.Net;

namespace TicketApi.Shared
{
    /// <summary>
    ///  Exception handler class for json+problem / problem details
    /// </summary>
    public class ExceptionHandlerJsonProblem(IProblemDetailsService problemDetailsService) : Microsoft.AspNetCore.Diagnostics.IExceptionHandler
    {
        private readonly IProblemDetailsService _problemDetailsService = problemDetailsService;

        /// <summary>
        ///  fills problem details page with values for thrown exceptions.
        /// </summary>
        /// <param name="httpContext">current httpcontext</param>
        /// <param name="exception">thrown exception</param>
        /// <param name="cancellationToken"></param>
        /// <returns></returns>
        public async ValueTask<bool> TryHandleAsync(HttpContext httpContext, Exception exception, CancellationToken cancellationToken)
        {
            httpContext.Response.StatusCode = (int)HttpStatusCode.BadRequest;

            try
            {
                return await _problemDetailsService.TryWriteAsync(new ProblemDetailsContext
                {
                    HttpContext = httpContext,
                    ProblemDetails =
                {
                    Title = "An error occurred",
                    Detail = exception.Message,
                    Type = exception.GetType().Name
                },
                    Exception = exception
                });
            }
            catch (OperationCanceledException opex)
            {
                return false;
            }
        }
    }
}