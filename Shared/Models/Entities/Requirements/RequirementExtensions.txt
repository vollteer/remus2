using Newtonsoft.Json;
using TicketApi.Features.Requirements.DTO;

namespace TicketApi.Shared.Models.Entities.Requirements
{
    public static class RequirementMappingExtensions
    {
        // ✅ Entity → DTO (mit deinen Navigation Properties)
        public static RequirementDto ToDto(this Requirement entity)
        {
            return new RequirementDto
            {
                Id = entity.Id,
                RequirementNumber = entity.RequirementNumber,
                Title = entity.Title,
                Description = entity.Description,
                RequirementType = entity.RequirementType,
                Priority = entity.Priority,
                Status = entity.Status,
                RequestedBy = entity.RequestedBy,
                BusinessOwner = entity.BusinessOwner,
                TechnicalOwner = entity.TechnicalOwner,
                Department = entity.Department,
                CostCenter = entity.CostCenter, //  Dein zusätzliches Feld
                EstimatedCost = entity.EstimatedCost,
                ApprovedBudget = entity.ApprovedBudget,
                ActualCost = entity.ActualCost,
                Currency = entity.Currency, // Dein zusätzliches Feld

                //  DateTime? → DateTime? (direkt, kein Problem!)
                RequestedDate = entity.RequestedDate,
                RequiredByDate = entity.RequiredByDate,
                StartDate = entity.StartDate,
                CompletedDate = entity.CompletedDate,
                CreatedAt = entity.CreatedAt,
                ModifiedAt = entity.ModifiedAt,

                // Workflow Properties
                CurrentWorkflowConfigId = entity.CurrentWorkflowConfigId,
                CurrentWorkflowStep = entity.CurrentWorkflowStep,
                WorkflowInstanceId = entity.WorkflowInstanceId,

                // Form Properties
                FormConfigurationId = entity.FormConfigurationId,
                FormData = entity.FormData,

                //  Security Properties
                HasPersonalData = entity.HasPersonalData,
                SecurityClassification = entity.SecurityClassification,
                ComplianceFlags = entity.ComplianceFlags, 

                CreatedBy = entity.CreatedBy,
                ModifiedBy = entity.ModifiedBy,

                // Navigation Properties
                WorkflowConfigName = entity.CurrentWorkflowConfig?.Name,
                FormConfigName = entity.FormConfiguration?.Name,
                AttachmentCount = entity.RequirementAttachments?.Count ?? 0,
                CommentCount = entity.RequirementComments?.Count ?? 0
            };
        }

        private static Dictionary<string, object>? ParseJsonSafely(string? json)
        {
            if (string.IsNullOrEmpty(json)) return null;

            try
            {
                return JsonConvert.DeserializeObject<Dictionary<string, object>>(json);
            }
            catch (JsonException)
            {
                return null; // Fallback bei invalid JSON
            }
        }
    }


}
