import { component$, useSignal, useTask$, $ } from '@builder.io/qwik';

// Import from structured types
import type {
  FormConfiguration,
  FormField,
  FormSection,
  FieldType,
  FieldPermissions,
  RequirementType,
  CreateFormConfigurationRequest,
  UpdateFormConfigurationRequest
} from '~/types/database';

// Import real API service
import { FormsApiService, ApiError } from '~/services/api/forms-api.service';

// ====================================
// FIELD TEMPLATES & CONFIGURATION
// ====================================

interface FieldTemplate {
  id: string;
  type: FieldType;
  icon: string;
  title: string;
  description: string;
  color: string;
  category: 'basic' | 'financial' | 'workflow' | 'advanced';
  defaultPermissions?: FieldPermissions;
  defaultOptions?: { value: string; label: string }[];
}

const enhancedFieldTemplates: FieldTemplate[] = [
  {
    id: 'template-text',
    type: 'text',
    icon: 'üìù',
    title: 'Text',
    description: 'Einzeiliges Textfeld',
    color: '#3b82f6',
    category: 'basic',
    defaultPermissions: {
      allowedRoles: ['Requester', 'Approver'],
      allowedUsers: [],
      readOnlyRoles: [],
      hideFromRoles: ['External']
    }
  },
  {
    id: 'template-textarea',
    type: 'textarea',
    icon: 'üìÑ',
    title: 'Textarea',
    description: 'Mehrzeiliges Textfeld',
    color: '#6366f1',
    category: 'basic'
  },
  {
    id: 'template-currency',
    type: 'currency',
    icon: 'üí∞',
    title: 'W√§hrung',
    description: 'W√§hrungsfeld mit Euro-Symbol',
    color: '#10b981',
    category: 'financial',
    defaultPermissions: {
      allowedRoles: ['Requester', 'Manager', 'Approver'],
      allowedUsers: [],
      readOnlyRoles: ['Viewer'],
      hideFromRoles: ['External']
    }
  },
  {
    id: 'template-select',
    type: 'select',
    icon: 'üìã',
    title: 'Dropdown',
    description: 'Einfachauswahl Dropdown',
    color: '#ef4444',
    category: 'basic',
    defaultOptions: [
      { value: 'option1', label: 'Option 1' },
      { value: 'option2', label: 'Option 2' },
      { value: 'option3', label: 'Option 3' }
    ]
  },
  {
    id: 'template-approval',
    type: 'select',
    icon: '‚úÖ',
    title: 'Genehmigung',
    description: 'Genehmigungsfeld (nur f√ºr Approver)',
    color: '#10b981',
    category: 'workflow',
    defaultPermissions: {
      allowedRoles: ['Approver', 'Manager'],
      allowedUsers: [],
      readOnlyRoles: ['Requester', 'Viewer'],
      hideFromRoles: ['External']
    },
    defaultOptions: [
      { value: 'pending', label: 'Ausstehend' },
      { value: 'approved', label: 'Genehmigt' },
      { value: 'rejected', label: 'Abgelehnt' }
    ]
  },
  {
    id: 'template-priority',
    type: 'select',
    icon: 'üî•',
    title: 'Priorit√§t',
    description: 'Priorit√§tsstufen',
    color: '#f59e0b',
    category: 'basic',
    defaultOptions: [
      { value: 'low', label: 'Niedrig' },
      { value: 'medium', label: 'Mittel' },
      { value: 'high', label: 'Hoch' },
      { value: 'critical', label: 'Kritisch' }
    ]
  },
  {
    id: 'template-date',
    type: 'date',
    icon: 'üìÖ',
    title: 'Datum',
    description: 'Datumsauswahl',
    color: '#8b5cf6',
    category: 'basic'
  },
  {
    id: 'template-email',
    type: 'email',
    icon: 'üìß',
    title: 'E-Mail',
    description: 'E-Mail Adresse',
    color: '#06b6d4',
    category: 'basic'
  },
  {
    id: 'template-phone',
    type: 'phone',
    icon: 'üìû',
    title: 'Telefon',
    description: 'Telefonnummer',
    color: '#84cc16',
    category: 'basic'
  },
  {
    id: 'template-checkbox',
    type: 'checkbox',
    icon: '‚òëÔ∏è',
    title: 'Checkbox',
    description: 'Einzelne Checkbox',
    color: '#22c55e',
    category: 'basic'
  },
  {
    id: 'template-file',
    type: 'file',
    icon: 'üìé',
    title: 'Datei',
    description: 'Datei-Upload',
    color: '#f97316',
    category: 'advanced'
  },
  {
    id: 'template-divider',
    type: 'divider',
    icon: '‚ûñ',
    title: 'Trennlinie',
    description: 'Visuelle Trennung',
    color: '#6b7280',
    category: 'advanced'
  }
];

const availableRoles = [
  'Administrator', 'Manager', 'Approver', 'Requester', 
  'TechnicalLead', 'BusinessUser', 'Viewer', 'External'
];

const FIELD_WIDTHS = {
  'full': 'Vollbreite',
  'half': 'Halbe Breite', 
  'third': 'Drittel',
  'quarter': 'Viertel'
} as const;

const requirementTypes: RequirementType[] = [
  'Kleinanforderung',
  'Gro√üanforderung', 
  'TIA-Anforderung',
  'Supportleistung',
  'Betriebsauftrag',
  'SBBI-L√∂sung',
  'AWG-Release',
  'AWS-Release'
];

// ====================================
// MAIN COMPONENT
// ====================================

export const EnhancedFormBuilder = component$(() => {
  // ==================== STATE MANAGEMENT ====================
  
  // Basic UI State
  const selectedRequirementType = useSignal<RequirementType>('Kleinanforderung');
  const formFields = useSignal<FormField[]>([]);
  const formSections = useSignal<FormSection[]>([]);
  const selectedField = useSignal<FormField | null>(null);
  const currentConfig = useSignal<FormConfiguration | null>(null);
  
  // Loading & Status
  const isLoading = useSignal(false);
  const isSaving = useSignal(false);
  const isDirty = useSignal(false);
  const lastSaved = useSignal<string | null>(null);
  
  // UI Modes
  const previewMode = useSignal(false);
  const lightModePreview = useSignal(false);
  const showPermissionsEditor = useSignal(false);
  const showStepBindingEditor = useSignal(false);
  const showLightModeConfig = useSignal(false);
  
  // Notifications
  const notification = useSignal<{ 
    message: string; 
    type: 'success' | 'error' | 'info' | 'warning';
    id: string;
  } | null>(null);
  
  // User Context (w√ºrdest du aus deinem Auth Context holen)
  const currentUserRoles = useSignal<string[]>(['Requester', 'Approver']);
  const availableWorkflowSteps = useSignal<{ value: string; label: string }[]>([]);
  
  // ==================== HELPER FUNCTIONS ====================
  
  const showNotification = $((
    message: string, 
    type: 'success' | 'error' | 'info' | 'warning' = 'info'
  ) => {
    const id = `notification-${Date.now()}`;
    notification.value = { message, type, id };
    
    // Auto-hide after 5 seconds
    setTimeout(() => {
      if (notification.value?.id === id) {
        notification.value = null;
      }
    }, 5000);
  });
  
  const markDirty = $(() => {
    isDirty.value = true;
  });
  
  const markClean = $(() => {
    isDirty.value = false;
    lastSaved.value = new Date().toLocaleTimeString();
  });
  
  const getFieldsBySection = (sectionId: string) => {
    return formFields.value.filter(field => field.section === sectionId);
  };
  
  const getFieldIcon = (type: FieldType) => {
    const template = enhancedFieldTemplates.find(t => t.type === type);
    return template?.icon || 'üìù';
  };
  
  const getFieldColor = (type: FieldType) => {
    const template = enhancedFieldTemplates.find(t => t.type === type);
    return template?.color || '#3b82f6';
  };
  
  // ==================== API INTEGRATION ====================
  
  const loadFormConfiguration = $(async (requirementType: RequirementType) => {
    isLoading.value = true;
    try {
      console.log(`Loading form configuration for: ${requirementType}`);
      
      const config = await FormsApiService.getFormConfiguration(
        requirementType, 
        currentUserRoles.value
      );
      
      if (config) {
        // Load existing configuration
        currentConfig.value = config;
        formFields.value = [...config.fields].sort((a, b) => a.order - b.order);
        formSections.value = [...config.sections].sort((a, b) => a.order - b.order);
        
        console.log('Loaded existing form configuration:', config);
        showNotification(`Formular f√ºr "${requirementType}" geladen`, 'success');
      } else {
        // Create new configuration
        const newConfig: FormConfiguration = {
          id: '', // Will be set by backend
          name: `${requirementType} Formular`,
          requirementType,
          sections: [{
            id: 'section-1',
            title: 'Grunddaten',
            description: 'Grundlegende Informationen',
            collapsible: false,
            collapsed: false,
            order: 1
          }],
          fields: [],
          version: 1,
          isActive: true,
          hasLightMode: true,
          createdAt: new Date().toISOString(),
          modifiedAt: new Date().toISOString(),
          createdBy: 'Current User',
          lightMode: {
            enabled: true,
            title: 'Schnellerstellung',
            description: 'Nur die wichtigsten Felder'
          }
        };
        
        currentConfig.value = newConfig;
        formFields.value = [];
        formSections.value = newConfig.sections;
        
        console.log('Created new form configuration');
        showNotification(`Neues Formular f√ºr "${requirementType}" erstellt`, 'info');
      }
      
      selectedField.value = null;
      markClean();
      
    } catch (error) {
      console.error('Error loading form configuration:', error);
      
      if (error instanceof ApiError) {
        showNotification(`API Fehler: ${error.message}`, 'error');
      } else {
        showNotification('Fehler beim Laden der Formular-Konfiguration', 'error');
      }
    } finally {
      isLoading.value = false;
    }
  });
  
  const loadWorkflowSteps = $(async (requirementType: RequirementType) => {
    try {
      const steps = await FormsApiService.getWorkflowSteps(requirementType);
      availableWorkflowSteps.value = steps;
      console.log(`Loaded ${steps.length} workflow steps for ${requirementType}`);
    } catch (error) {
      console.error('Error loading workflow steps:', error);
      // Not critical, continue without workflow steps
      availableWorkflowSteps.value = [];
    }
  });
  
  const saveFormConfiguration = $(async () => {
    if (!currentConfig.value) return;
    
    isSaving.value = true;
    try {
      const configToSave: FormConfiguration = {
        ...currentConfig.value,
        fields: formFields.value,
        sections: formSections.value,
        modifiedAt: new Date().toISOString()
      };
      
      let savedConfig: FormConfiguration;
      
      if (configToSave.id) {
        // Update existing
        const updateRequest: UpdateFormConfigurationRequest = {
          id: configToSave.id,
          version: configToSave.version,
          name: configToSave.name,
          description: configToSave.description,
          requirementType: configToSave.requirementType,
          workflowStepId: configToSave.workflowStepId,
          sections: configToSave.sections,
          fields: configToSave.fields,
          hasLightMode: configToSave.hasLightMode,
          permissions: configToSave.permissions,
          lightMode: configToSave.lightMode
        };
        
        savedConfig = await FormsApiService.updateFormConfiguration(updateRequest);
        console.log('Updated form configuration:', savedConfig);
      } else {
        // Create new
        const createRequest: CreateFormConfigurationRequest = {
          name: configToSave.name,
          description: configToSave.description,
          requirementType: configToSave.requirementType,
          workflowStepId: configToSave.workflowStepId,
          sections: configToSave.sections,
          fields: configToSave.fields,
          isActive: configToSave.isActive,
          hasLightMode: configToSave.hasLightMode,
          permissions: configToSave.permissions,
          lightMode: configToSave.lightMode
        };
        
        savedConfig = await FormsApiService.createFormConfiguration(createRequest);
        console.log('Created form configuration:', savedConfig);
      }
      
      // Update local state with saved config
      currentConfig.value = savedConfig;
      markClean();
      
      showNotification(
        `Formular-Konfiguration f√ºr "${selectedRequirementType.value}" gespeichert!`, 
        'success'
      );
      
    } catch (error) {
      console.error('Error saving form configuration:', error);
      
      if (error instanceof ApiError) {
        showNotification(`Speichern fehlgeschlagen: ${error.message}`, 'error');
      } else {
        showNotification('Fehler beim Speichern der Formular-Konfiguration', 'error');
      }
    } finally {
      isSaving.value = false;
    }
  });
  
  // Auto-save every 30 seconds if dirty
  useTask$(({ track, cleanup }) => {
    track(() => isDirty.value);
    
    if (isDirty.value && currentConfig.value) {
      const autoSaveTimer = setTimeout(() => {
        if (isDirty.value) {
          console.log('Auto-saving form configuration...');
          saveFormConfiguration();
        }
      }, 30000); // 30 seconds
      
      cleanup(() => clearTimeout(autoSaveTimer));
    }
  });
  
  // ==================== FIELD MANAGEMENT ====================
  
  const addNewField = $((template: FieldTemplate) => {
    const newField: FormField = {
      id: `field-${Date.now()}`,
      type: template.type,
      name: `field_${Date.now()}`,
      label: `Neues ${template.title}`,
      placeholder: template.type === 'text' ? 'Platzhalter Text‚Ä¶' : undefined,
      required: false,
      lightModeVisible: false,
      width: 'full',
      section: formSections.value[0]?.id || 'section-1',
      order: formFields.value.length + 1,
      permissions: template.defaultPermissions || {
        allowedRoles: ['Requester'],
        allowedUsers: [],
        readOnlyRoles: [],
        hideFromRoles: []
      },
      workflowStepBinding: [],
      options: ['select', 'multiselect', 'radio', 'checkboxGroup'].includes(template.type)
        ? template.defaultOptions || [
            { value: 'option1', label: 'Option 1' },
            { value: 'option2', label: 'Option 2' }
          ]
        : undefined
    };
    
    formFields.value = [...formFields.value, newField];
    selectedField.value = newField;
    markDirty();
    
    console.log('Added new field:', newField);
    showNotification(`Feld "${newField.label}" hinzugef√ºgt`, 'success');
  });
  
  const updateField = $((fieldId: string, updates: Partial<FormField>) => {
    formFields.value = formFields.value.map(field =>
      field.id === fieldId ? { ...field, ...updates } : field
    );
    
    if (selectedField.value?.id === fieldId) {
      selectedField.value = { ...selectedField.value, ...updates };
    }
    
    markDirty();
    console.log('Updated field:', fieldId, updates);
  });
  
  const deleteField = $((fieldId: string) => {
    const fieldToDelete = formFields.value.find(f => f.id === fieldId);
    
    formFields.value = formFields.value.filter(field => field.id !== fieldId);
    
    // Reorder remaining fields
    formFields.value.forEach((field, index) => {
      field.order = index + 1;
    });
    
    if (selectedField.value?.id === fieldId) {
      selectedField.value = null;
    }
    
    markDirty();
    
    if (fieldToDelete) {
      showNotification(`Feld "${fieldToDelete.label}" gel√∂scht`, 'info');
    }
  });
  
  const duplicateField = $((field: FormField) => {
    const fieldCopy: FormField = {
      ...field,
      id: `field-${Date.now()}`,
      name: `${field.name}_copy`,
      label: `${field.label} (Kopie)`,
      order: formFields.value.length + 1
    };
    
    formFields.value = [...formFields.value, fieldCopy];
    selectedField.value = fieldCopy;
    markDirty();
    
    showNotification(`Feld "${field.label}" dupliziert`, 'success');
  });
  
  // ==================== LIFECYCLE HOOKS ====================
  
  // Load form configuration when component mounts or type changes
  useTask$(async ({ track }) => {
    track(() => selectedRequirementType.value);
    await loadFormConfiguration(selectedRequirementType.value);
    await loadWorkflowSteps(selectedRequirementType.value);
  });
  
  // Warn user before leaving if unsaved changes
  useTask$(({ track, cleanup }) => {
    track(() => isDirty.value);
    
    const handleBeforeUnload = (e: BeforeUnloadEvent) => {
      if (isDirty.value) {
        e.preventDefault();
        e.returnValue = 'Sie haben ungespeicherte √Ñnderungen. Wirklich verlassen?';
        return e.returnValue;
      }
    };
    
    if (isDirty.value) {
      window.addEventListener('beforeunload', handleBeforeUnload);
      cleanup(() => window.removeEventListener('beforeunload', handleBeforeUnload));
    }
  });
  
  // ==================== RENDER ====================
  
  return (
    <div class="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900">
      {/* Header */}
      <div class="bg-white dark:bg-slate-800 shadow-sm border-b border-slate-200 dark:border-slate-700">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div class="flex items-center justify-between h-16">
            <div class="flex items-center space-x-4">
              <h1 class="text-xl font-semibold text-slate-900 dark:text-white">
                üìù Enhanced Form Builder
              </h1>
              
              {/* Requirement Type Selector */}
              <select
                value={selectedRequirementType.value}
                onChange$={(e) => {
                  selectedRequirementType.value = e.target.value as RequirementType;
                }}
                class="px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg text-sm bg-white dark:bg-slate-700 text-slate-900 dark:text-white"
                disabled={isLoading.value}
              >
                {requirementTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
              
              {/* Status Indicators */}
              {isDirty.value && (
                <span class="inline-flex items-center px-2 py-1 text-xs font-medium text-amber-600 bg-amber-100 dark:bg-amber-900 dark:text-amber-300 rounded-full">
                  üîÑ Ungespeichert
                </span>
              )}
              
              {lastSaved.value && !isDirty.value && (
                <span class="text-xs text-slate-500 dark:text-slate-400">
                  üíæ Gespeichert um {lastSaved.value}
                </span>
              )}
            </div>
            
            {/* Action Buttons */}
            <div class="flex items-center space-x-3">
              <button
                onClick$={saveFormConfiguration}
                disabled={isSaving.value || isLoading.value}
                class="inline-flex items-center px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 rounded-lg transition-colors"
              >
                {isSaving.value ? (
                  <>
                    <div class="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full mr-2"></div>
                    Speichert...
                  </>
                ) : (
                  <>üíæ Speichern</>
                )}
              </button>
              
              <button
                onClick$={() => previewMode.value = !previewMode.value}
                class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-700 dark:text-slate-300 bg-white dark:bg-slate-700 border border-slate-300 dark:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-600 rounded-lg transition-colors"
              >
                üëÅÔ∏è Vorschau
              </button>
            </div>
          </div>
        </div>
      </div>
      
      {/* Main Content */}
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Loading State */}
        {isLoading.value && (
          <div class="flex items-center justify-center py-12">
            <div class="text-center">
              <div class="animate-spin h-8 w-8 border-2 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
              <p class="text-slate-600 dark:text-slate-400">
                Lade Formular-Konfiguration...
              </p>
            </div>
          </div>
        )}
        
        {/* Main Builder Interface */}
        {!isLoading.value && (
          <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
            {/* Field Templates Sidebar */}
            <div class="lg:col-span-1">
              <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6">
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white mb-4">
                  üß© Feld-Vorlagen
                </h3>
                
                <div class="space-y-3">
                  {enhancedFieldTemplates.map(template => (
                    <button
                      key={template.id}
                      onClick$={() => addNewField(template)}
                      class="w-full text-left p-3 rounded-lg border border-slate-200 dark:border-slate-600 hover:border-blue-300 dark:hover:border-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 transition-all group"
                    >
                      <div class="flex items-center space-x-3">
                        <span class="text-xl">{template.icon}</span>
                        <div class="flex-1 min-w-0">
                          <div class="text-sm font-medium text-slate-900 dark:text-white">
                            {template.title}
                          </div>
                          <div class="text-xs text-slate-500 dark:text-slate-400 truncate">
                            {template.description}
                          </div>
                        </div>
                        <div 
                          class="w-3 h-3 rounded-full"
                          style={`background-color: ${template.color}`}
                        ></div>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Form Builder Canvas */}
            <div class="lg:col-span-2">
              <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6">
                <div class="flex items-center justify-between mb-6">
                  <h3 class="text-lg font-semibold text-slate-900 dark:text-white">
                    üé® Formular-Designer
                  </h3>
                  
                  <div class="flex items-center space-x-2">
                    <span class="text-sm text-slate-600 dark:text-slate-400">
                      {formFields.value.length} Felder
                    </span>
                  </div>
                </div>
                
                {/* Form Sections */}
                <div class="space-y-6">
                  {formSections.value.map(section => (
                    <div key={section.id} class="border border-slate-200 dark:border-slate-600 rounded-lg p-4">
                      <div class="flex items-center justify-between mb-4">
                        <h4 class="font-medium text-slate-900 dark:text-white">
                          üìÇ {section.title}
                        </h4>
                        <span class="text-xs text-slate-500 dark:text-slate-400">
                          {getFieldsBySection(section.id).length} Felder
                        </span>
                      </div>
                      
                      {/* Fields in Section */}
                      <div class="space-y-3">
                        {getFieldsBySection(section.id).map(field => (
                          <div
                            key={field.id}
                            class={`p-3 rounded-lg border transition-all cursor-pointer ${
                              selectedField.value?.id === field.id
                                ? 'border-blue-300 dark:border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                                : 'border-slate-200 dark:border-slate-600 hover:border-slate-300 dark:hover:border-slate-500'
                            }`}
                            onClick$={() => selectedField.value = field}
                          >
                            <div class="flex items-center justify-between">
                              <div class="flex items-center space-x-3">
                                <span class="text-lg">{getFieldIcon(field.type)}</span>
                                <div>
                                  <div class="text-sm font-medium text-slate-900 dark:text-white">
                                    {field.label}
                                  </div>
                                  <div class="text-xs text-slate-500 dark:text-slate-400">
                                    {field.type} ‚Ä¢ {field.required ? 'Pflichtfeld' : 'Optional'}
                                  </div>
                                </div>
                              </div>
                              
                              <div class="flex items-center space-x-2">
                                <button
                                  onClick$={(e) => {
                                    e.stopPropagation();
                                    duplicateField(field);
                                  }}
                                  class="p-1 text-slate-400 hover:text-blue-600 dark:hover:text-blue-400"
                                  title="Duplizieren"
                                >
                                  üìã
                                </button>
                                <button
                                  onClick$={(e) => {
                                    e.stopPropagation();
                                    deleteField(field.id);
                                  }}
                                  class="p-1 text-slate-400 hover:text-red-600 dark:hover:text-red-400"
                                  title="L√∂schen"
                                >
                                  üóëÔ∏è
                                </button>
                              </div>
                            </div>
                          </div>
                        ))}
                        
                        {getFieldsBySection(section.id).length === 0 && (
                          <div class="text-center py-8 text-slate-500 dark:text-slate-400">
                            <p class="text-sm">Keine Felder in dieser Sektion</p>
                            <p class="text-xs mt-1">Ziehen Sie Felder aus der Sidebar hierher</p>
                          </div>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
            
            {/* Field Properties Panel */}
            <div class="lg:col-span-1">
              <div class="bg-white dark:bg-slate-800 rounded-xl shadow-sm border border-slate-200 dark:border-slate-700 p-6">
                <h3 class="text-lg font-semibold text-slate-900 dark:text-white mb-4">
                  ‚öôÔ∏è Eigenschaften
                </h3>
                
                {selectedField.value ? (
                  <div class="space-y-4">
                    {/* Basic Properties */}
                    <div>
                      <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                        Label
                      </label>
                      <input
                        type="text"
                        value={selectedField.value.label}
                        onInput$={(e) => updateField(selectedField.value!.id, { 
                          label: (e.target as HTMLInputElement).value 
                        })}
                        class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg text-sm bg-white dark:bg-slate-700 text-slate-900 dark:text-white"
                      />
                    </div>
                    
                    <div>
                      <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                        Feldname
                      </label>
                      <input
                        type="text"
                        value={selectedField.value.name}
                        onInput$={(e) => updateField(selectedField.value!.id, { 
                          name: (e.target as HTMLInputElement).value 
                        })}
                        class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg text-sm bg-white dark:bg-slate-700 text-slate-900 dark:text-white"
                      />
                    </div>
                    
                    {/* Width Selection */}
                    <div>
                      <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                        Breite
                      </label>
                      <select
                        value={selectedField.value.width}
                        onChange$={(e) => updateField(selectedField.value!.id, { 
                          width: e.target.value as any
                        })}
                        class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg text-sm bg-white dark:bg-slate-700 text-slate-900 dark:text-white"
                      >
                        {Object.entries(FIELD_WIDTHS).map(([value, label]) => (
                          <option key={value} value={value}>{label}</option>
                        ))}
                      </select>
                    </div>
                    
                    {/* Boolean Options */}
                    <div class="space-y-3">
                      <label class="flex items-center">
                        <input
                          type="checkbox"
                          checked={selectedField.value.required}
                          onChange$={(e) => updateField(selectedField.value!.id, { 
                            required: (e.target as HTMLInputElement).checked 
                          })}
                          class="rounded border-slate-300 dark:border-slate-600 text-blue-600 focus:ring-blue-500"
                        />
                        <span class="ml-2 text-sm text-slate-700 dark:text-slate-300">
                          Pflichtfeld
                        </span>
                      </label>
                      
                      <label class="flex items-center">
                        <input
                          type="checkbox"
                          checked={selectedField.value.lightModeVisible}
                          onChange$={(e) => updateField(selectedField.value!.id, { 
                            lightModeVisible: (e.target as HTMLInputElement).checked 
                          })}
                          class="rounded border-slate-300 dark:border-slate-600 text-blue-600 focus:ring-blue-500"
                        />
                        <span class="ml-2 text-sm text-slate-700 dark:text-slate-300">
                          Im Light Mode anzeigen
                        </span>
                      </label>
                    </div>
                    
                    {/* Placeholder for text fields */}
                    {['text', 'textarea', 'email', 'phone'].includes(selectedField.value.type) && (
                      <div>
                        <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                          Platzhalter
                        </label>
                        <input
                          type="text"
                          value={selectedField.value.placeholder || ''}
                          onInput$={(e) => updateField(selectedField.value!.id, { 
                            placeholder: (e.target as HTMLInputElement).value 
                          })}
                          class="w-full px-3 py-2 border border-slate-300 dark:border-slate-600 rounded-lg text-sm bg-white dark:bg-slate-700 text-slate-900 dark:text-white"
                        />
                      </div>
                    )}
                    
                    {/* Options for select/radio/checkbox fields */}
                    {['select', 'multiselect', 'radio', 'checkboxGroup'].includes(selectedField.value.type) && (
                      <div>
                        <label class="block text-sm font-medium text-slate-700 dark:text-slate-300 mb-2">
                          Optionen
                        </label>
                        <div class="space-y-2">
                          {selectedField.value.options?.map((option, index) => (
                            <div key={index} class="flex items-center space-x-2">
                              <input
                                type="text"
                                value={option.label}
                                onInput$={(e) => {
                                  const newOptions = [...(selectedField.value?.options || [])];
                                  newOptions[index] = {
                                    ...option,
                                    label: (e.target as HTMLInputElement).value
                                  };
                                  updateField(selectedField.value!.id, { options: newOptions });
                                }}
                                class="flex-1 px-2 py-1 border border-slate-300 dark:border-slate-600 rounded text-xs bg-white dark:bg-slate-700 text-slate-900 dark:text-white"
                                placeholder="Option Label"
                              />
                              <button
                                onClick$={() => {
                                  const newOptions = selectedField.value?.options?.filter((_, i) => i !== index) || [];
                                  updateField(selectedField.value!.id, { options: newOptions });
                                }}
                                class="p-1 text-red-500 hover:text-red-700"
                                title="Option l√∂schen"
                              >
                                ‚úï
                              </button>
                            </div>
                          )) || []}
                          
                          <button
                            onClick$={() => {
                              const newOptions = [
                                ...(selectedField.value?.options || []),
                                { value: `option${Date.now()}`, label: 'Neue Option' }
                              ];
                              updateField(selectedField.value!.id, { options: newOptions });
                            }}
                            class="w-full py-2 text-xs text-blue-600 dark:text-blue-400 border border-dashed border-blue-300 dark:border-blue-600 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20"
                          >
                            + Option hinzuf√ºgen
                          </button>
                        </div>
                      </div>
                    )}
                  </div>
                ) : (
                  <div class="text-center py-8 text-slate-500 dark:text-slate-400">
                    <p class="text-sm">Kein Feld ausgew√§hlt</p>
                    <p class="text-xs mt-1">W√§hlen Sie ein Feld zum Bearbeiten</p>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}
      </div>
      
      {/* Notification Toast */}
      {notification.value && (
        <div class="fixed top-4 right-4 z-50">
          <div class={`px-4 py-3 rounded-lg shadow-lg border ${
            notification.value.type === 'success' ? 'bg-green-50 border-green-200 text-green-800' :
            notification.value.type === 'error' ? 'bg-red-50 border-red-200 text-red-800' :
            notification.value.type === 'warning' ? 'bg-amber-50 border-amber-200 text-amber-800' :
            'bg-blue-50 border-blue-200 text-blue-800'
          }`}>
            <div class="flex items-center justify-between">
              <span class="text-sm font-medium">
                {notification.value.message}
              </span>
              <button
                onClick$={() => notification.value = null}
                class="ml-3 text-lg leading-none opacity-70 hover:opacity-100"
              >
                ‚úï
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
});
