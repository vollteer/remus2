using System.Net;
using Microsoft.OpenApi.Models;
using Swashbuckle.AspNetCore.SwaggerGen;
using static TicketApi.Shared.Infrastructure.Utils.Helpers.Util;

namespace TicketApi.Features.TicketSearch.Filters
{
    public class EnableQueryFilter : IOperationFilter
    {
        // Statische, unveränderbare Liste von Abfrageparametern
        private static readonly List<OpenApiParameter> QueryParameters =
        [
            CreateParameter("$top", "Maximum number of records."),
            CreateParameter("$skip", "The number of records to skip."),
            CreateParameter("$filter", "Filtering clause for the record(s)."),
            CreateParameter("$select", "Columns to be returned as a comma-separated list."),
            CreateParameter("$orderby", "Orderby-Clause."),
            CreateParameter("$expand", "Add related query data.")
        ];

        public void Apply(OpenApiOperation operation, OperationFilterContext context)
        {
            if (context.ApiDescription.ActionDescriptor.EndpointMetadata
                .OfType<Microsoft.AspNetCore.OData.Query.EnableQueryAttribute>()
                .Any())
            {
                // Wenn operation.Parameters null ist, initialisieren wir sie
                operation.Parameters ??= [];

                // Hier verwenden wir eine Schleife anstelle von AddRange
                foreach (var parameter in QueryParameters)
                {
                    operation.Parameters.Add(parameter);
                }
            }

            // Hier verwenden wir eine Schleife anstelle von AddRange
            foreach (var parameter in QueryParameters)
            {
                operation.Parameters.Add(parameter);
            }

            operation.Responses = new OpenApiResponses
            {
                { "200", CreateResponse(HttpStatusCode.OK,
                    new OpenApiSchema
                    {
                        Type = "object",
                        Properties = new Dictionary<string, OpenApiSchema>
                        {
                            { "status", new OpenApiSchema { Type = "string" } }
                        },
                        AdditionalPropertiesAllowed = true
                    }) },
                 { "400", CreateResponse(HttpStatusCode.BadRequest,
                    new OpenApiSchema
                    {
                        Type = "object",
                        Properties = new Dictionary<string, OpenApiSchema>
                        {
                            { "status", new OpenApiSchema { Type = "string" } }
                        },
                        AdditionalPropertiesAllowed = true
                    }) },
                {
                    "503",
                    CreateResponse(HttpStatusCode.ServiceUnavailable,
                    new OpenApiSchema
                    {
                        Type = "object",
                        Properties = new Dictionary<string, OpenApiSchema>
                        {
                            { "status", new OpenApiSchema { Type = "string" } }
                        },
                        AdditionalPropertiesAllowed = true
                    })
                }
            };
        }

        // Hilfsmethode, um OpenApiParameter-Objekte zu erstellen
        private static OpenApiParameter CreateParameter(string name, string description) =>
            new()
            {
                Name = name,
                In = ParameterLocation.Query,
                Required = false,
                Schema = new OpenApiSchema { Type = "string" },
                Description = description
            };
    }
}