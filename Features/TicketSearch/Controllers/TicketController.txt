using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.OData.Query;
using Microsoft.AspNetCore.OData.Routing.Controllers;
using Swashbuckle.AspNetCore.Annotations;
using TicketApi.Features.Authentication.Attributes;
using TicketApi.Features.TicketSearch.Services;
using TicketApi.Shared.Models;

namespace TicketApi.Features.TicketSearch.Controllers
{
    /// <summary>
    ///  <c>TicketController</c> contains methods for searching for tickets, updating tickets, deleting tickets.
    /// </summary>

    [ApiController]
    [Route("api/tickets")]
    [ApiExplorerSettings(GroupName = "TicketQueries")]
    public class TicketController(ITicketService ticketService, ILogger<TicketController> logger) : ODataController
    {
        private readonly ITicketService _ticketService = ticketService;
        private readonly ILogger<TicketController> _logger = logger;
        public User? userCurrent;

        /// <summary>
        /// Function for ticket search implementation. Searches the ticket database (ANFO) for the desired tickets depending on the query
        /// options the user passes. Filters the tickets by read allowed. If the user does not have the right permissions, the ticket
        /// will be removed
        /// from the list and not returned to the user.
        /// </summary>
        /// <param name="qOptions">query options for odata</param>
        /// <param name="cancel">cancellation tokgen</param>
        /// <returns></returns>
        [Authorized]
        [HttpGet("list")]
        [SwaggerOperation(Description = "Get-Method for querying tickets in ANFO database.",
            Tags = ["Tickets", "User"])]
        [EnableQuery]
        public async Task<ActionResult<IQueryable<Ticket>>> Get()
        {
            //permissions
            var userid = HttpContext.Items["UserId"].ToString();
            var tickets = await _ticketService.GetTicketsAsQueryable(userid);

            return Ok(tickets);
        }

        [Authorized]
        [HttpGet("single/{id}")]
        [SwaggerOperation(Description = "GET-Method for querying a single ticket from database",
            Tags = ["Tickets", "User"])]
        public async Task<ActionResult<Ticket>> GetSingle(int id, CancellationToken cancel)
        {
            var userid = HttpContext.Items["UserId"].ToString();
            if (userid == null) { return Unauthorized(); }

            var ticket = await _ticketService.GetByIdAsync(id, userid, cancel);
            if (ticket == null)
            {
                return NotFound();
            }

            return Ok(ticket);
        }
    }
}