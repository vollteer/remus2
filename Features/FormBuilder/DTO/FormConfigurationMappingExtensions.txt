using Newtonsoft.Json;
using TicketApi.Shared.Infrastructure.Utils.Helpers;
using TicketApi.Shared.Models.Entities;

namespace TicketApi.Features.FormBuilder.DTO
{
    public static class FormConfigurationMappingExtensions
    {
        public static FormConfiguration MapDtoToEntity(CreateFormConfigurationRequest dto, string createdBy)
        {
            return new FormConfiguration
            {
                Id = Guid.NewGuid(),
                RequirementType = dto.RequirementType,
                Name = dto.Name,
                Description = dto.Description,
                WorkflowStepId = dto.WorkflowStepId,
                ConfigurationData = JsonConvert.SerializeObject(new
                {
                    sections = dto.Sections,
                    fields = dto.Fields,
                    permissions = dto.Permissions,
                    lightMode = dto.LightMode
                }),
                Version = VersionHelper.CreateInitialVersion(),
                IsActive = dto.IsActive,
                HasLightMode = dto.HasLightMode,
                CreatedAt = DateTime.UtcNow,
                ModifiedAt = DateTime.UtcNow,
                CreatedBy = createdBy
            };
        }
        public static FormConfiguration MapUpdateDtoToEntity(UpdateFormConfigurationRequest dto, FormConfiguration entity)
        {
            entity.Name = dto.Name;
            entity.Description = dto.Description;
            entity.ConfigurationData = JsonConvert.SerializeObject(new
            {
                fields = dto.Fields,
                sections = dto.Sections,
                permissions = dto.Permissions,
                lightMode = dto.LightMode
            });
            entity.IsActive = dto.IsActive;
            entity.HasLightMode = dto.HasLightMode;
            entity.WorkflowStepId = dto.WorkflowStepId;

            return entity;
        }

        public static FormTemplateDto MapTemplateEntityToDto(FormTemplate entity)
        {
            var templateData = JsonConvert.DeserializeObject<FormConfigurationDto>(entity.TemplateData);

            if(templateData == null)
            {
                throw new InvalidOperationException($"Template data for '{entity.Name}' is corrupted or invalid");
            }

            return new FormTemplateDto
            {
                Id = entity.Id,
                Name = entity.Name,
                Description = entity.Description,
                Category = entity.Category,
                RequirementType = entity.RequirementType,
                UsageCount = entity.UsageCount,
                IsPublic = entity.IsPublic,
                IsActive = entity.IsActive,
                TemplateData = templateData,
                LastUsedAt = entity.LastUsedAt?.ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
            };
        }
    }
}
