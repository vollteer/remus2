using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.EntityFrameworkCore;
using TicketApi.Shared.Models;

namespace TicketApi.Features.Authentication.Attributes
{
    public class UserApiKeyAttribute : Attribute, IAsyncActionFilter
    {
        public async Task OnActionExecutionAsync(ActionExecutingContext context, ActionExecutionDelegate next)
        {
            if (await ValidateUserApiKey(context))
            {
                await next();
            }
        }

        public static async Task<bool> ValidateUserApiKey(ActionExecutingContext context)
        {
            var dbContext = context.HttpContext.RequestServices.GetRequiredService<RemusContext>();
            var logger = context.HttpContext.RequestServices.GetRequiredService<ILogger<UserApiKeyAttribute>>();
            var userApiKey = context.HttpContext.Request.Headers["user-api-key"].FirstOrDefault();

            if (string.IsNullOrEmpty(userApiKey))
            {
                logger.LogWarning("user api key required");
                context.Result = new UnauthorizedObjectResult("User api key required");
                return false;
            }

            var apiKeyRecord = await dbContext.ApiKeys
                .FirstOrDefaultAsync(k => k.ApiKey == userApiKey);
            // tbd: key expired?

            if (apiKeyRecord == null)
            {
                logger.LogWarning("Invalid user API key: {ApiKey}", userApiKey);
                context.Result = new UnauthorizedObjectResult("Invalid user API key");
                return false;
            }

            logger.LogDebug("Valid user API key for user: {UserId}", apiKeyRecord.ApiKey);
            // save user info in context
            context.HttpContext.Items["UserId"] = apiKeyRecord.UserId;
            //context.HttpContext.Items["UserApiKey"] = apiKeyRecord;

            return true;
        }
    }
}