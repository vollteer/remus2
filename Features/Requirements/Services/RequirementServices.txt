using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using Newtonsoft.Json;
using TicketApi.Shared.Models.Entities;
using TicketApi.Features.Requirements.DTO;
using TicketApi.Features.Requirements.Services;
using TicketApi.Features.Authentication.Services;
using TicketApi.Shared.Models.Entities.Requirements;

namespace TicketApi.Features.Requirements.Services
{
    public class RequirementService : IRequirementServices
    {
        private readonly RequirementsDbContext _context;
        private readonly IUserService _userService;
        private readonly ILogger<RequirementService> _logger;

        public RequirementService(
            RequirementsDbContext context,
            IUserService userService,
            ILogger<RequirementService> logger)
        {
            _context = context;
            _userService = userService;
            _logger = logger;
        }

        #region CRUD Operations

        public async Task<RequirementDto> CreateRequirementAsync(CreateRequirementRequest request)
        {
            _logger.LogInformation("Creating new requirement: {Title}", request.Title);

            var currentUser = await _userService.GetCurrentUserIdAsync();
            var now = DateTime.UtcNow;

            var entity = new Requirement
            {
                Id = Guid.NewGuid(),
                RequirementNumber = await GenerateRequirementNumberAsync(request.RequirementType),
                Title = request.Title,
                Description = request.Description,
                RequirementType = request.RequirementType,
                Priority = request.Priority ?? "Medium",
                Status = "Draft",
                RequestedBy = currentUser,
                BusinessOwner = request.BusinessOwner,
                TechnicalOwner = request.TechnicalOwner,
                Department = request.Department,
                CostCenter = request.CostCenter,
                EstimatedCost = request.EstimatedCost,
                ApprovedBudget = request.ApprovedBudget,
                Currency = request.Currency ?? "EUR",
                RequestedDate = now,
                RequiredByDate = request.RequiredByDate,
                StartDate = request.StartDate,
                CreatedAt = now,
                ModifiedAt = now,
                HasPersonalData = request.HasPersonalData,
                SecurityClassification = request.SecurityClassification ?? "Internal",
                CreatedBy = currentUser,
                ModifiedBy = currentUser,
                FormConfigurationId = request.FormConfigurationId,
                FormData = request.FormData
            };

            _context.Requirements.Add(entity);
            await _context.SaveChangesAsync();

            _logger.LogInformation("Created requirement {Id} with number {Number}", entity.Id, entity.RequirementNumber);
            return entity.ToDto();
        }

        public async Task<RequirementDto?> GetRequirementByIdAsync(Guid id)
        {
            _logger.LogInformation("Getting requirement by id: {Id}", id);

            var requirement = await _context.Requirements
                .Include(r => r.CurrentWorkflowConfig)
                .Include(r => r.FormConfiguration)
                .Include(r => r.RequirementAttachments)
                .Include(r => r.RequirementComments)
                .FirstOrDefaultAsync(r => r.Id == id);

            if (requirement == null)
            {
                _logger.LogWarning("Requirement with id {Id} not found", id);
                return null;
            }

            return requirement.ToDto();
        }

        public async Task<RequirementDto?> GetRequirementByNumberAsync(string requirementNumber)
        {
            _logger.LogInformation("Getting requirement by number: {Number}", requirementNumber);

            var requirement = await _context.Requirements
                .Include(r => r.CurrentWorkflowConfig)
                .Include(r => r.FormConfiguration)
                .Include(r => r.RequirementAttachments)
                .Include(r => r.RequirementComments)
                .FirstOrDefaultAsync(r => r.RequirementNumber == requirementNumber);

            if (requirement == null)
            {
                _logger.LogWarning("Requirement with number {Number} not found", requirementNumber);
                return null;
            }

            return requirement.ToDto();
        }

        public async Task<PagedResultDto<RequirementDto>> GetRequirementsAsync(RequirementQueryRequest query)
        {
            _logger.LogInformation("Getting requirements with query: {Query}", JsonConvert.SerializeObject(query));

            var queryable = _context.Requirements
                .Include(r => r.CurrentWorkflowConfig)
                .Include(r => r.FormConfiguration)
                .Include(r => r.RequirementAttachments)
                .Include(r => r.RequirementComments)
                .Where(r => r.Status != "Deleted");

            // Apply filters based on query parameters
            if (!string.IsNullOrEmpty(query.Type))
                queryable = queryable.Where(r => r.RequirementType == query.Type);

            if (!string.IsNullOrEmpty(query.Status))
                queryable = queryable.Where(r => r.Status == query.Status);

            if (!string.IsNullOrEmpty(query.Priority))
                queryable = queryable.Where(r => r.Priority == query.Priority);

            if (!string.IsNullOrEmpty(query.Department))
                queryable = queryable.Where(r => r.Department == query.Department);

            if (!string.IsNullOrEmpty(query.SearchText))
                queryable = queryable.Where(r => r.Title.Contains(query.SearchText) ||
                                               r.Description!.Contains(query.SearchText));

            if (query.CreatedFrom.HasValue)
                queryable = queryable.Where(r => r.CreatedAt >= query.CreatedFrom);

            if (query.CreatedTo.HasValue)
                queryable = queryable.Where(r => r.CreatedAt <= query.CreatedTo);

            // Apply sorting based on query parameters
            queryable = query.SortBy?.ToLower() switch
            {
                "title" => query.SortDirection == "asc" ? queryable.OrderBy(r => r.Title) : queryable.OrderByDescending(r => r.Title),
                "status" => query.SortDirection == "asc" ? queryable.OrderBy(r => r.Status) : queryable.OrderByDescending(r => r.Status),
                "priority" => query.SortDirection == "asc" ? queryable.OrderBy(r => r.Priority) : queryable.OrderByDescending(r => r.Priority),
                "createdat" => query.SortDirection == "asc" ? queryable.OrderBy(r => r.CreatedAt) : queryable.OrderByDescending(r => r.CreatedAt),
                _ => queryable.OrderByDescending(r => r.CreatedAt)
            };

            var totalCount = await queryable.CountAsync();

            var items = await queryable
                .Skip((query.Page - 1) * query.PageSize)
                .Take(query.PageSize)
                .ToListAsync();

            return new PagedResultDto<RequirementDto>
            {
                Items = items.Select(r => r.ToDto()).ToList(),
                TotalCount = totalCount,
                PageNumber = query.Page,
                PageSize = query.PageSize
            };
        }

        public async Task<RequirementDto?> UpdateRequirementAsync(Guid id, UpdateRequirementRequest request)
        {
            _logger.LogInformation("Updating requirement {Id}", id);

            var requirement = await _context.Requirements.FindAsync(id);
            if (requirement == null)
            {
                _logger.LogWarning("Requirement with id {Id} not found", id);
                return null;
            }

            var currentUser = await _userService.GetCurrentUserIdAsync();

            // Update only non-null properties to allow partial updates
            if (request.Title != null) requirement.Title = request.Title;
            if (request.Description != null) requirement.Description = request.Description;
            if (request.RequirementType != null) requirement.RequirementType = request.RequirementType;
            if (request.Priority != null) requirement.Priority = request.Priority;
            if (request.Status != null) requirement.Status = request.Status;
            if (request.Department != null) requirement.Department = request.Department;
            if (request.TechnicalOwner != null) requirement.TechnicalOwner = request.TechnicalOwner;
            if (request.BusinessOwner != null) requirement.BusinessOwner = request.BusinessOwner;
            if (request.CostCenter != null) requirement.CostCenter = request.CostCenter;
            if (request.EstimatedCost.HasValue) requirement.EstimatedCost = request.EstimatedCost;
            if (request.ApprovedBudget.HasValue) requirement.ApprovedBudget = request.ApprovedBudget;
            if (request.RequiredByDate.HasValue) requirement.RequiredByDate = request.RequiredByDate;
            if (request.StartDate.HasValue) requirement.StartDate = request.StartDate;
            if (request.FormData != null) requirement.FormData = request.FormData;

            requirement.HasPersonalData = request.HasPersonalData;
            requirement.SecurityClassification = request.SecurityClassification;
            requirement.ModifiedAt = DateTime.UtcNow;
            requirement.ModifiedBy = currentUser;

            await _context.SaveChangesAsync();

            _logger.LogInformation("Updated requirement {Id}", id);
            return requirement.ToDto();
        }

        public async Task<bool> DeleteRequirementAsync(Guid id)
        {
            _logger.LogInformation("Deleting requirement {Id}", id);

            var requirement = await _context.Requirements.FindAsync(id);
            if (requirement == null)
            {
                _logger.LogWarning("Requirement with id {Id} not found", id);
                return false;
            }

            var currentUser = await _userService.GetCurrentUserIdAsync();

            // Soft delete by setting status instead of removing from database
            requirement.Status = "Deleted";
            requirement.ModifiedAt = DateTime.UtcNow;
            requirement.ModifiedBy = currentUser;

            await _context.SaveChangesAsync();

            _logger.LogInformation("Soft deleted requirement {Id}", id);
            return true;
        }

        #endregion

        #region Status Operations

        public async Task<RequirementDto?> UpdateStatusAsync(Guid id, string status, string? comments = null)
        {
            _logger.LogInformation("Updating status for requirement {Id} to {Status}", id, status);

            var requirement = await _context.Requirements.FindAsync(id);
            if (requirement == null) return null;

            var currentUser = await _userService.GetCurrentUserIdAsync();

            requirement.Status = status;
            requirement.ModifiedAt = DateTime.UtcNow;
            requirement.ModifiedBy = currentUser;

            // Add audit trail comment when status changes
            if (!string.IsNullOrEmpty(comments))
            {
                var comment = new RequirementComment
                {
                    Id = Guid.NewGuid(),
                    RequirementId = id,
                    Comment = comments,
                    CommentType = "StatusChange",
                    CreatedBy = currentUser,
                    CreatedAt = DateTime.UtcNow
                };
                _context.RequirementComments.Add(comment);
            }

            await _context.SaveChangesAsync();

            _logger.LogInformation("Updated status for requirement {Id} to {Status}", id, status);
            return requirement.ToDto();
        }

        public async Task<RequirementDto?> SubmitRequirementAsync(Guid id)
        {
            return await UpdateStatusAsync(id, "Submitted", "Requirement submitted for approval");
        }

        public async Task<RequirementDto?> ApproveRequirementAsync(Guid id, string? comments = null)
        {
            return await UpdateStatusAsync(id, "Approved", comments ?? "Requirement approved");
        }

        public async Task<RequirementDto?> RejectRequirementAsync(Guid id, string reason)
        {
            return await UpdateStatusAsync(id, "Rejected", reason);
        }

        #endregion

        #region Workflow Operations

        public async Task<RequirementDto?> StartWorkflowAsync(Guid id, Guid workflowConfigId)
        {
            _logger.LogInformation("Starting workflow for requirement {Id} with config {WorkflowConfigId}", id, workflowConfigId);

            var requirement = await _context.Requirements.FindAsync(id);
            if (requirement == null) return null;

            var currentUser = await _userService.GetCurrentUserIdAsync();

            requirement.CurrentWorkflowConfigId = workflowConfigId;
            requirement.WorkflowInstanceId = Guid.NewGuid(); // Create new workflow instance
            requirement.CurrentWorkflowStep = "Started";
            requirement.Status = "InProgress";
            requirement.ModifiedAt = DateTime.UtcNow;
            requirement.ModifiedBy = currentUser;

            await _context.SaveChangesAsync();

            _logger.LogInformation("Started workflow for requirement {Id}", id);
            return requirement.ToDto();
        }

        public async Task<RequirementDto?> AdvanceWorkflowStepAsync(Guid id, string stepId, string? decision = null)
        {
            _logger.LogInformation("Advancing workflow step for requirement {Id} to {StepId}", id, stepId);

            var requirement = await _context.Requirements.FindAsync(id);
            if (requirement == null) return null;

            var currentUser = await _userService.GetCurrentUserIdAsync();

            requirement.CurrentWorkflowStep = stepId;
            requirement.ModifiedAt = DateTime.UtcNow;
            requirement.ModifiedBy = currentUser;

            await _context.SaveChangesAsync();

            _logger.LogInformation("Advanced workflow step for requirement {Id} to {StepId}", id, stepId);
            return requirement.ToDto();
        }

        public async Task<RequirementDto?> AssignWorkflowStepAsync(Guid id, string stepId, string assigneeId)
        {
            _logger.LogInformation("Assigning workflow step {StepId} for requirement {Id} to {AssigneeId}", stepId, id, assigneeId);

            var requirement = await _context.Requirements.FindAsync(id);
            if (requirement == null) return null;

            var currentUser = await _userService.GetCurrentUserIdAsync();

            // Store assignee information - in a full implementation this would use WorkflowStepInstance table
            requirement.TechnicalOwner = assigneeId;
            requirement.ModifiedAt = DateTime.UtcNow;
            requirement.ModifiedBy = currentUser;

            await _context.SaveChangesAsync();

            _logger.LogInformation("Assigned workflow step {StepId} for requirement {Id} to {AssigneeId}", stepId, id, assigneeId);
            return requirement.ToDto();
        }

        #endregion

        #region Bulk Operations

        public async Task<BulkOperationResultDto> BulkUpdateAsync(BulkUpdateRequirementsRequest request)
        {
            _logger.LogInformation("Performing bulk update on {Count} requirements", request.RequirementIds.Count);

            var result = new BulkOperationResultDto
            {
                SuccessCount = 0,
                FailureCount = 0,
                Errors = new List<BulkOperationErrorDto>()
            };

            var currentUser = await _userService.GetCurrentUserIdAsync();

            foreach (var id in request.RequirementIds)
            {
                try
                {
                    var requirement = await _context.Requirements.FindAsync(id);
                    if (requirement == null)
                    {
                        result.FailureCount++;
                        result.Errors.Add(new BulkOperationErrorDto
                        {
                            RequirementId = id,
                            RequirementNumber = $"REQ-{id}",
                            Error = "Requirement not found"
                        });
                        continue;
                    }

                    // Apply bulk updates only to non-null fields
                    if (request.Status != null) requirement.Status = request.Status;
                    if (request.Priority != null) requirement.Priority = request.Priority;

                    requirement.ModifiedAt = DateTime.UtcNow;
                    requirement.ModifiedBy = currentUser;

                    result.SuccessCount++;
                }
                catch (Exception ex)
                {
                    result.FailureCount++;
                    result.Errors.Add(new BulkOperationErrorDto
                    {
                        RequirementId = id,
                        RequirementNumber = $"REQ-{id}",
                        Error = $"Error updating requirement: {ex.Message}"
                    });
                }
            }

            await _context.SaveChangesAsync();

            _logger.LogInformation("Bulk update completed: {SuccessCount} success, {FailureCount} failures",
                result.SuccessCount, result.FailureCount);

            return result;
        }

        public async Task<BulkOperationResultDto> BulkDeleteAsync(List<Guid> requirementIds)
        {
            _logger.LogInformation("Performing bulk delete on {Count} requirements", requirementIds.Count);

            var result = new BulkOperationResultDto
            {
                SuccessCount = 0,
                FailureCount = 0,
                Errors = new List<BulkOperationErrorDto>()
            };

            var currentUser = await _userService.GetCurrentUserIdAsync();

            foreach (var id in requirementIds)
            {
                try
                {
                    var requirement = await _context.Requirements.FindAsync(id);
                    if (requirement == null)
                    {
                        result.FailureCount++;
                        result.Errors.Add(new BulkOperationErrorDto
                        {
                            RequirementId = id,
                            RequirementNumber = $"REQ-{id}",
                            Error = "Requirement not found"
                        });
                        continue;
                    }

                    // Soft delete by status change
                    requirement.Status = "Deleted";
                    requirement.ModifiedAt = DateTime.UtcNow;
                    requirement.ModifiedBy = currentUser;

                    result.SuccessCount++;
                }
                catch (Exception ex)
                {
                    result.FailureCount++;
                    result.Errors.Add(new BulkOperationErrorDto
                    {
                        RequirementId = id,
                        RequirementNumber = $"REQ-{id}",
                        Error = $"Error deleting requirement: {ex.Message}"
                    });
                }
            }

            await _context.SaveChangesAsync();

            _logger.LogInformation("Bulk delete completed: {SuccessCount} success, {FailureCount} failures",
                result.SuccessCount, result.FailureCount);

            return result;
        }

        #endregion

        #region Statistics & Reports

        public async Task<RequirementStatisticsDto> GetStatisticsAsync(DateTime? fromDate = null, DateTime? toDate = null)
        {
            _logger.LogInformation("Getting requirement statistics from {FromDate} to {ToDate}", fromDate, toDate);

            var query = _context.Requirements.Where(r => r.Status != "Deleted");

            if (fromDate.HasValue)
                query = query.Where(r => r.CreatedAt >= fromDate);

            if (toDate.HasValue)
                query = query.Where(r => r.CreatedAt <= toDate);

            var totalRequirements = await query.CountAsync();

            var statusCounts = await query
                .GroupBy(r => r.Status)
                .Select(g => new { Status = g.Key, Count = g.Count() })
                .ToListAsync();

            var typeCounts = await query
                .GroupBy(r => r.RequirementType)
                .Select(g => new { Type = g.Key, Count = g.Count() })
                .ToListAsync();

            var priorityCounts = await query
                .GroupBy(r => r.Priority)
                .Select(g => new { Priority = g.Key, Count = g.Count() })
                .ToListAsync();

            var averageCost = await query
                .Where(r => r.EstimatedCost.HasValue)
                .AverageAsync(r => r.EstimatedCost.Value);

            return new RequirementStatisticsDto
            {
                TotalRequirements = totalRequirements,
                StatusDistribution = statusCounts.ToDictionary(x => x.Status ?? "Unknown", x => x.Count),
                TypeDistribution = typeCounts.ToDictionary(x => x.Type, x => x.Count),
                PriorityDistribution = priorityCounts.ToDictionary(x => x.Priority, x => x.Count),
                AverageEstimatedCost = averageCost,
                InProgressCount = statusCounts.FirstOrDefault(x => x.Status == "InProgress")?.Count ?? 0,
                CompletedThisMonth = await query.CountAsync(r => r.Status == "Completed" &&
                    r.CompletedDate.HasValue && r.CompletedDate.Value.Month == DateTime.Now.Month),
                OverdueCount = await query.CountAsync(r => r.RequiredByDate < DateTime.Now && r.Status != "Completed")
            };
        }

        public async Task<List<RequirementDto>> GetMyRequirementsAsync(string userId, string? status = null)
        {
            _logger.LogInformation("Getting requirements for user {UserId} with status {Status}", userId, status);

            var query = _context.Requirements
                .Include(r => r.CurrentWorkflowConfig)
                .Include(r => r.FormConfiguration)
                .Where(r => r.RequestedBy == userId ||
                           r.BusinessOwner == userId ||
                           r.TechnicalOwner == userId)
                .Where(r => r.Status != "Deleted");

            if (!string.IsNullOrEmpty(status))
                query = query.Where(r => r.Status == status);

            var requirements = await query
                .OrderByDescending(r => r.CreatedAt)
                .ToListAsync();

            return requirements.Select(r => r.ToDto()).ToList();
        }

        public async Task<List<RequirementDto>> GetOverdueRequirementsAsync()
        {
            _logger.LogInformation("Getting overdue requirements");

            var overdue = await _context.Requirements
                .Include(r => r.CurrentWorkflowConfig)
                .Include(r => r.FormConfiguration)
                .Where(r => r.RequiredByDate < DateTime.Now &&
                           r.Status != "Completed" &&
                           r.Status != "Deleted")
                .OrderBy(r => r.RequiredByDate)
                .ToListAsync();

            return overdue.Select(r => r.ToDto()).ToList();
        }

        #endregion

        #region Validation

        public async Task<RequirementValidationResultDto> ValidateRequirementAsync(CreateRequirementRequest request)
        {
            var result = new RequirementValidationResultDto
            {
                IsValid = true,
                Errors = new List<ValidationErrorDto>(),
                Warnings = new List<ValidationWarningDto>()
            };

            // Basic field validations
            if (string.IsNullOrWhiteSpace(request.Title))
            {
                result.IsValid = false;
                result.Errors.Add(new ValidationErrorDto
                {
                    Field = nameof(request.Title),
                    Message = "Title is required",
                    Code = "TITLE_REQUIRED"
                });
            }

            // Business rule validations
            if (request.EstimatedCost.HasValue && request.EstimatedCost < 0)
            {
                result.IsValid = false;
                result.Errors.Add(new ValidationErrorDto
                {
                    Field = nameof(request.EstimatedCost),
                    Message = "Estimated cost cannot be negative",
                    Code = "INVALID_COST"
                });
            }

            // Date validation warnings
            if (request.RequiredByDate.HasValue && request.RequiredByDate < DateTime.Now.AddDays(1))
            {
                result.Warnings.Add(new ValidationWarningDto
                {
                    Field = nameof(request.RequiredByDate),
                    Message = "Required date is very soon",
                    Code = "TIGHT_DEADLINE"
                });
            }

            return result;
        }

        public async Task<RequirementValidationResultDto> ValidateUpdateAsync(Guid id, UpdateRequirementRequest request)
        {
            var result = new RequirementValidationResultDto
            {
                IsValid = true,
                Errors = new List<ValidationErrorDto>(),
                Warnings = new List<ValidationWarningDto>()
            };

            var existing = await _context.Requirements.FindAsync(id);
            if (existing == null)
            {
                result.IsValid = false;
                result.Errors.Add(new ValidationErrorDto
                {
                    Field = "Id",
                    Message = "Requirement not found",
                    Code = "NOT_FOUND"
                });
                return result;
            }

            // Apply same validation rules as create operation
            return result;
        }

        #endregion

        #region Helper Methods

        public async Task<string> GenerateRequirementNumberAsync(string requirementType)
        {
            var year = DateTime.Now.Year;
            var count = await _context.Requirements
                .CountAsync(r => r.CreatedAt.HasValue && r.CreatedAt.Value.Year == year);

            // Generate type-specific prefixes for requirement numbers
            var prefix = requirementType switch
            {
                "Kleinanforderung" => "KA",
                "Großanforderung" => "GA",
                "TIA-Anforderung" => "TIA",
                _ => "REQ"
            };

            return $"{prefix}-{year}-{count + 1:D4}";
        }

        #endregion
    }
}
